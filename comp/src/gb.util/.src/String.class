' Gambas class file

Export

Private Const REMOVE_ACC As String = "ÀÁÂÃÄÅĀĂĄǍǞǠȀȂȦȺǺẠẢẬẶḀẮẰẲẴẪẤẦẨ[A]ÈÉÊËĒĖĘĚȄȨɆĔȆḘḜẸẺỆḚẼỄḔḖẾỀỂ[E]ÌÍÎÏĨĪĬĮİƗǏȈȊḬỈỊḮ[I]ŎÒÓÔÖŌŐƠǑǬȌȎȮỌỎỘỚỜỞỢỠȪȰȬÕṌṎṐṒỐỒỔỖ[O]ǗǙǛȖŬŨŮǕÙÚÛÜŪŰŲƯǓȔɄṲṴṶỤỦỨỪỬỮỰƲṺṸ[U]ÝŶŸƳȲɎẎỲỴỶỸỾ[Y]"
  "ƁɃḂḄḆ[B]ÇĆĈĊČƇȻḈ[C]ĎÐĐƉḊḌḎḐḒ[D]ƑḞ[F]ĞĜĠĢƓǤǦǴɢʛḠ[G]ĤȞĦḢḤḦḪḨ[H]ĴɈɟʄʝ[J]ĶƘǨḰḲḴ[K]ĹĻĽĿʟŁȽḶḸḺḼ[L]ḾṀṂ[M]ƝÑŃŅŇŊǸṄṆṈṊ[N]ƤṔṖ[P]ŔŖŘȐȒɌṘṚṜṞ[R]ŚŜŞŠȘṠṢṨṤṦ[S]ŢŤŦƮȚȾṪṬṮṰ[T]ṼṾ[V]ŴẀẂẄẆẈ[W]ẊẌ[X]ŹŻŽƵȤẐẒẔ[Z]"
  "ÆǢǼ[AE]Œɶ[OE]ßẞ[ss]æǣǽ[ae]œ[oe]"
  "àáâãäåāăąǎǟǡǻȁȃȧắằẳẵḁẚạảấầẩậặẫ[a]èéêëēĕėęěȅȇȩɇḕḗḙḛḝẹẻẽếềểệễ[e]īĭìíïîĩįıǐȉȋɨỉḭḯị[i]òóôõöōŏőơǒǫǭȍȏȫȯȱȭṍṏṑṓọỏốồổỗộớờởỡợ[o]ùúûüũūŭůűųưǔǖǘǚǜȕȗṹṳṷṻụủứừửữựṵ[u]ýÿŷƴȳɏỵẏẙỳỷỹỿ[y]"
  "ɓƀḃḅḇ[b]çćĉċčƈȼɕḉ[c]ďɖɗđḋḍḏḑḓ[d]ƒḟ[f]ĝğġģǥǧǵɠɡḡ[g]ĥȟɦɧħḣḥḧḫẖḩ[h]ĵǰȷɉ[j]ķƙǩḱḳḵ[k]ĺľŀłļḽḷḹḻ[l]ɱḿṁṃ[m]ñńņňŉŋǹṅṇṉṋ[n]ƥṕṗ[p]ʠɋ[q]ŕŗřȑȓṙṛṝṟ[r]śŝşšșʂȿṡṣṥṧṩ[s]ţťŧƫƭțṫṭṯṱẗ[t]ʋṽṿ[v]ŵẁẃẅẇẉẘ[w]ẋẍ[x]źżžƶȥɀʐʑẑẓẕ[z]"

Static Public Sub RemoveDiacritics({String} As String) As String

  If Not {String} Then Return
  If IsAscii({String}) Then Return {String}

  Return DoRemoveAccents({String})
  
End

Static Private Sub DoRemoveAccents(sStr As String) As String

  Dim sCar As String
  Dim iPos As Integer
  Dim iPosL As Integer
  Dim iPosR As Integer
  Dim sNewStr As String
  Dim I As Integer
  Dim L As Integer

  L = 1
  For I = 1 To Len(sStr)
    If IsAscii(Mid$(sStr, I, 1)) Then Continue
    If I > L Then sNewStr &= Mid$(sStr, L, I - L)
    sCar = String.Left(Mid$(sStr, I))
    L = I + Len(sCar)
    I = L - 1
    iPos = InStr(REMOVE_ACC, sCar)
    If iPos Then
      iPosL = InStr(REMOVE_ACC, "[", iPos + 1)
      iPosR = InStr(REMOVE_ACC, "]", iPos + 1)
      If iPosL <> 0 And If iPosR <> 0 And If iPosL < iPosR Then
        sCar = Mid$(REMOVE_ACC, iPosL + 1, iPosR - iPosL - 1)
      Endif
    Endif
    sNewStr &= sCar
    
  Next

  If I > L Then sNewStr &= Mid$(sStr, L)

  Return sNewStr

End

Static Public Sub Distance(String1 As String, String2 As String) As Integer
  
  Dim L1 As Integer = String.Len(String1)
  Dim L2 As Integer = String.Len(String2)
  Dim D As New Integer[L1 + 1, L2 + 1]
  Dim I, J, C As Integer
  Dim C1, C1M, C2, C2M As String
  
  For I = 0 To L1
    D[I, 0] = I
  Next
  
  For J = 0 To L2
    D[0, J] = J
  Next
  
  For I = 1 To L1
    
    C1M = C1
    C1 = String.Mid$(String1, I, 1)
    
    C2 = ""
    
    For J = 1 To L2
      
      C2M = C2
      C2 = String.Mid$(String2, J, 1)
      
      If C1 = C2 Then
        C = 0
      Else
        C = 1
      Endif
      
      D[I, J] = Min(Min(D[I - 1, J] + 1, D[I, J - 1] + 1), D[I - 1, J - 1] + C)
      
      If I > 1 And If J > 1 Then
        If C1 = C2M And If C1M = C2 Then
          D[I, J] = Min(D[I, J], D[I - 2, J - 2] + C)
        Endif
      Endif
      
    Next
  Next
  
  Return D[L1, L2]
  
End

Static Public Sub FromHTML(Html As String) As String

  Dim P As Integer
  Dim iLen As Integer
  Dim C As String
  Dim sResult As String
  Dim C2 As String
  Dim sEntity As String
  Dim sMarkup As String
  Dim aMarkup As New String[]
  
  iLen = String.Len(Html)
  
READ_TEXT:
  
  GoSub READ_CHAR
  
  If C = "<" Then Goto READ_MARKUP
  
  If C = "&" Then Goto READ_ENTITY
  
  If aMarkup.Count = 0 Then sResult &= C
  Goto READ_TEXT
  
READ_MARKUP:

READ_MARKUP_NAME:

  GoSub READ_CHAR
  
  If C = " " Then Goto READ_MARKUP_REST
  If C = ">" Then Goto READ_MARKUP_END
  
  sMarkup &= C
  
  Goto READ_MARKUP_NAME
  
READ_MARKUP_REST:

  GoSub READ_CHAR
  
  If C = ">" Then Goto READ_MARKUP_END
  
  If C = Chr$(34) Or If C = "'" Then 
    C2 = C
    Goto READ_STRING
  Endif
  
  Goto READ_MARKUP_REST

READ_MARKUP_END:

  sMarkup = LCase(sMarkup)
  If sMarkup Begins "/" Then
    sMarkup = Mid$(sMarkup, 2)
    If sMarkup = "li" Then
      sResult &= "\n"
    Endif
    If aMarkup.Count Then
      If aMarkup[aMarkup.Max] = sMarkup Then aMarkup.Pop()
    Endif
  Else
    If sMarkup = "script" Or If sMarkup = "style" Then
      aMarkup.Push(sMarkup)
    Else If sMarkup = "br" Then
      sResult &= "\n"
    Else If sMarkup = "ul" Or If sMarkup = "ol" Or If sMarkup = "p" Then
      If Right(sResult) <> "\n" Then sResult &= "\n"
    Else If sMarkup = "li" Then
      sResult &= "- "
    Endif
  Endif
  sMarkup = ""
  Goto READ_TEXT

READ_STRING:

  GoSub READ_CHAR
  
  If C = C2 Then Goto READ_MARKUP
  
  Goto READ_STRING

READ_ENTITY:
  
  GoSub READ_CHAR
  
  If IsDigit(C) Or If IsLetter(C) Or If C = "#" Then
    sEntity &= C
    Goto READ_ENTITY
  Endif
  
  Select Case sEntity
    Case "lt"
      C = "<"
    Case "gt"
      C = ">"
    Case "amp"
      C = "&"
    Case "nbsp"
      C = String.Chr$(160)
    Case "quot"
      C = Chr$(34)
    Case "apos"
      C = "'"
    Case Else
      If sEntity Begins "#x" Then
        Try C = String.Chr(Val("&H" & Mid$(sEntity, 3)))
        If Error Then C = "?"
      Else If sEntity Begins "#" Then
        Try C = String.Chr(CInt(Mid$(sEntity, 2)))
        If Error Then C = "?"
      Else
        C = "&" & sEntity
        Dec P
      Endif
  End Select
  
  If aMarkup.Count = 0 Then sResult &= C
  sEntity = ""
  Goto READ_TEXT
  
READ_CHAR:

  Inc P
  If P > iLen Then 
    Return sResult
  Endif
  C = String.Mid$(Html, P, 1)
  Return
  
End

Static Public Sub ToPhonetic({String} As String, Optional Language As String = System.Language) As String

  Dim I As Integer
  Dim sStr As String
  Dim sCar As String
  Dim J As Integer
  Dim sWord As String
  Dim sResult As String
  
  sStr = Trim({String})
  If Not sStr Then Return
  
  Try Language = LCase(Split(Language, "-._")[0])
  
  Select Case Language
    
    Case "c", "en"
      Error.Raise("Unsupported language")
    
    Case "fr"
      sStr = MPhonetic_French.Before(sStr)
    
    Default
      Error.Raise("Unsupported language")
      
  End Select

  sStr = LCase(RemoveDiacritics(sStr)) & " "
  
  For I = 1 To Len(sStr)
    
    sCar = Mid$(sStr, I, 1)
    
    If IsLetter(sCar) Or IsDigit(sCar) Then 
      If J = 0 Then J = I
      Continue
    Endif
    
    If J = 0 Then Continue
    
    sWord = Mid$(sStr, J, I - J)
    J = 0
  
    If sResult And If Right(sResult) <> " " Then sResult &= " "
    Select Case Language
      
      Case "c", "en"
        Error.Raise("Unsupported language")
      
      Case "fr"
        sResult &= MPhonetic_French.Run(sWord)
      
      Default
        Error.Raise("Unsupported language")
        
    End Select
  
  Next
  
  Return sResult
  
End

Static Private Sub PadString(sStr As String, iLength As Integer, sPad As String, bRight As Boolean) As String
  
  Dim iLen As Integer
  
  If iLength < 0 Then Error.Raise("Bad argument")
  iLength -= String.Len(sStr)
  
  If Len(sPad) = 1 Then
    If bRight Then
      Return sStr & String$(iLength, sPad)
    Else
      Return String$(iLength, sPad) & sStr
    Endif
  Else
    iLen = String.Len(sPad)
    If bRight Then
      Return sStr & String.Right(sPad, iLength Mod iLen) & String$(iLength \ iLen, sPad)
    Else
      Return String$(iLength \ iLen, sPad) & String.Left(sPad, iLength Mod iLen) & sStr
    Endif
  Endif
  
End

Static Public Sub PadLeft({String} As String, Length As Integer, Optional Pad As String = " ") As String
  
  Return PadString({String}, Length, Pad, False)

End

Static Public Sub PadRight({String} As String, Length As Integer, Optional Pad As String = " ") As String

  Return PadString({String}, Length, Pad, True)
  
End

