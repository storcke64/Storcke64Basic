' Gambas class file

''' This virtual class represents a specific line of a [../texteditor].

Export

Event _Fake

Public _Line As Integer

'' Return or set the text contents of the line.
''
'' You must not put line separator characters (`"\r"` or `"\n"`) in the text of a line.

Property Text As String

'' Return the line length in UTF-8 characters.

Property Read Length As Integer

'' Return if the line has a limit mark, i.e. if it is the beginning of a function.

Property Read Limit As Boolean

'' Return a virtual object that represents the initial highlighting state of the line.

Property Read InitialState As _TextEditor_State

'' Return the line height in pixels.

Property Read Height, H As Integer

'' Return or set if the line is expanded.
''
'' Only lines whose [../limit] is 'TRUE' can be expanded or collapsed.

Property Expanded As Boolean

'' Return or set if the line is a breakpoint.

Property Breakpoint As Boolean

'' Return or set if the line is a disabled breakpoint.

Property Disabled As Boolean

'' Return or set if the line is a bookmark.

Property Bookmark As Boolean

'' Return if the line is an added line in "diff mode".

Property Read Added As Boolean

Private Sub GetView() As TextEditor
  
  Return Object.Parent(Me)
  
End


Private Sub GetDoc() As CDocument

  Return GetView()._GetDocument()

End

Private Function Text_Read() As String

  Return GetDoc().Lines[_Line]

End

Private Function Length_Read() As Integer

  Return GetDoc().LineLength[_Line]

End

Private Sub Text_Write(Value As String)

  With GetView()
    If ._GetDocument().Lines[_Line] <> Value Then
      .SaveCursor
      .Begin
      .Remove(0, _Line, String.Len(._GetDocument().Lines[_Line]), _Line)
      .Insert(Value)
      .End
      .RestoreCursor
    Endif
  End With

End

'' Refresh that line.

Public Sub Refresh()
  
  With GetDoc()
    .Info(_Line).ClearHighlight
    '.HighlightFrom(_Line)
    .Refresh(_Line)
  End With
  
End


Private Function Limit_Read() As Boolean

  Dim hDoc As CDocument

  hDoc = GetDoc()
  hDoc.HighlightUntil(_Line)
  Return hDoc.Info(_Line).Limit

End

Private Function Breakpoint_Read() As Boolean

  Return GetDoc().HasBreakpoint(_Line)

End

Private Sub Breakpoint_Write(Value As Boolean)

  With GetDoc()
    .SetBreakpoint(_Line, Value, GetDoc().IsBreakpointDisabled(_Line))
    .Refresh(_Line)
  End With

End

Private Function Bookmark_Read() As Boolean

  Return GetDoc().HasBookmark(_Line)

End

Private Sub Bookmark_Write(Value As Boolean)

  With GetDoc()
    .SetBookmark(_Line, Value)
    .Refresh(_Line)
  End With

End

Private Function InitialState_Read() As _TextEditor_State

  Dim hState As _TextEditor_State

  hState = New _TextEditor_State
  If _Line > 0 Then hState._State = GetDoc().Info(_Line - 1)
  Return hState

End

'' Purge the line from its comments and/or strings, according to its highlighting.
''
'' - If ~KeepComment~ is set, the comments are kept intact. Comments are the characters associated with [Highlight.Comment](/comp/gb.eval/highlight/comment) or [Highlight.Help](/comp/gb.eval/highlight/help) styles.
'' - If ~KeepString~ is set, the strings are kept intact. Strings are the characters associated with [Highlight.String](/comp/gb.eval/highlight/string) style.
'' - ~Replace~ is the character that replaces the removed elements. By default it is a space.
''
'' If the line is not highlighted, then it is returned as is.

Public Sub Purge(Optional KeepComment As Boolean, KeepString As Boolean, Replace As String = " ") As String

  Dim hDoc As CDocument = GetDoc()
  Dim aColor As Byte[]
  Dim sPurge As String
  Dim I As Integer
  Dim iState As Byte
  Dim sText As String
  Dim X As Integer
  Dim bReplace As Boolean
  
  sText = hDoc.Lines[_Line]
  aColor = GetDoc().Info(_Line).Colors
  If Not aColor Then Return sText
  
  X = 1
  For I = 0 To aColor.Max Step 2
    iState = aColor[I]
    bReplace = False
    If Not KeepComment Then
      If iState = Highlight.Comment Or If iState = Highlight.Help Then
        bReplace = True
      Endif
    Endif
    If Not KeepString And If iState = Highlight.String Then
      bReplace = True
    Endif
    If bReplace Then
      sPurge &= String$(aColor[I + 1], Replace)
    Else
      sPurge &= String.Mid$(sText, X, aColor[I + 1])
    Endif
    X += aColor[I + 1]
  Next
  
  Return sPurge
  
End

Private Function Expanded_Read() As Boolean

  Return GetView()._IsRowExpanded(_Line)

End

Private Sub Expanded_Write(Value As Boolean)

  With GetView()
    If Value Then
      ._ExpandRow(_Line)
    Else
      ._CollapseRow(_Line)
    Endif
  End With

End

Private Function Height_Read() As Integer

  Return GetView()._GetRowHeight(_Line)

End

Private Function Disabled_Read() As Boolean

  Return GetDoc().IsBreakpointDisabled(_Line)

End

Private Sub Disabled_Write(Value As Boolean)

  With GetDoc()
    .SetBreakpoint(_Line, GetDoc().HasBreakpoint(_Line), Value)
    .Refresh(_Line)
  End With
  
End

'' Paint that line on the current painter at a specified position.
''
'' - ~X~ and ~Y~ are the top left position where the line must be painted.

Public Sub Paint(X As Integer, Y As Integer)

  GetDoc().HighlightUntil(Y)
  GetView()._PaintRow(_Line, X, Y)
  
End

Private Function Added_Read() As Boolean

  Return GetView()._IsAdded(_Line)

End
