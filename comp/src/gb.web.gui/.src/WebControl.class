' Gambas class file

''' This class is the parent class of every web controls.

Export
Create Private

Public _Invalid As Boolean

Public Const _IsControl As Boolean = True
Public Const _Properties As String = "Class,Width{WebCoord},Height{WebCoord},Visible=True,Enabled=True,Tag,Expand,Ignore,Background{Color},Foreground{Color},Tooltip,Font{WebFont}"
Public Const _Family As String = "WebForm"
Public Const _DefaultEvent As String = "Render"

'' This event is raised just after the rendering of the control, so that you can add your own HTML contents.
Event Render

'' This event is raised when a keyboard key is pressed while the control has the focus.
Event KeyPress

'' Return the server control identifier.
Property Read Id As Integer

'' Return or set the name of the control, used as an identifier on the client side.
Property Name As String

'' Returns or sets the control tag.
''
'' This property is intended for the programmer and is never used by the component. It can contain any [/lang/type/variant] value.
Property Tag As Variant

'' Return the parent container of the control.
Property Read Parent As WebContainer

'' Return or set if the control should expand its size according to its parent arrangement mode.
Property Expand As Boolean

'' Return or set if the control is visible.
Property Visible As Boolean

'' Return a virtual object that allows to define specific style sheet elements of the control.
Property Read Style As WebControlStyle

'' Return the web form that control belongs to.
Property Read Form As WebForm

'' Return or set the explicit width of the control.
''
'' This property can take any valid CSS size. If not set, the control will have its default width.
Property Width, W As String

'' Return or set the explicit height of the control.
''
'' This property can take any valid CSS size. If not set, the control will have its default height.
Property Height, H As String

'' Return or set if the control must be ignored by its parent container in automatic arrangement mode.
Property Ignore As Boolean

'' Return or set if the control is enabled.
Property Enabled As Boolean

'' Return or set the background color of the control.
Property Background As Integer

'' Return or set the foreground color of the control.
Property Foreground As Integer

'' Return or set if the control has a border.
Property Border As Boolean

'' Return or set the specific CSS classes added to the control.
Property Class As String

'' Return or set the tooltip displayed when the mouse cursor hovers the control.
Property Tooltip As String

'' Return or set the specific font of the control.
Property Font As String

Static Private $iCount As Integer
Static Private $iLastId As Integer
Static Private $iLastFormId As Integer
Static Private $cFromId As New Collection
Static Private $cFromName As New Collection

Static Private $aStyleSheet As String[]

Static Public _NextName As String

Static Public _Shortcuts As New Collection

Static Private $hCellParent As WebControl
Static Private $sCellId As String

Public _Refresh As Boolean
Public _EventName As String
Public _Proxy As String
Public _NoRefresh As Integer
Public _Naked As Boolean

Private $iId As Integer
Private $iParentId As Integer
Private $iFormId As Integer
Private $sName As String
Private $vTag As Variant

Private $iStyleSheet As Integer
Private $hStyle As WebControlStyle

Private $iBackground As Integer = Color.Default
Private $iForeground As Integer = Color.Default

Private $bExpand As Boolean
Private $bIgnore As Boolean
Private $bDisabled As Boolean
Private $bHidden As Boolean
Private $bNoBorder As Boolean
Private $sClass As String
Private $sTooltip As String

'' Create a new [@{class}](.).

Public Sub _new(Optional Parent As WebContainer)
  
  Dim sName As String
  
  _NoRefresh = 1
  
  Inc $iCount
  'WebForm.PrintLog("==== " & $iCount & " controls")
  
  Inc $iLastId
  $iId = $iLastId
  
  If _NextName Then
    sName = _NextName
    _NextName = ""
  Endif
  
  If Me Is WebForm Then
    Object.Attach(Me, Me, "WebForm")
    $iFormId = $iId
    Inc $iLastFormId
    If Not sName Then sName = "@" & CStr($iLastFormId)
  Else
    _EventName = Param.EventName
    Try $iFormId = Parent.Form.Id
    If Not sName Then sName = Param.EventName
    If Not sName Then sName = "$" & CStr($iId)
  Endif
  
  SetName(sName)
  
  $cFromId[$iId] = Me
  
  Parent_Write(Parent)
  
  _NoRefresh = 0
  
  'Debug Object.Type(Me);; $sName;; $iId
  
End

Private Sub SetName(Optional sName As String)
  
  Dim iSuffix As Integer
  Dim sNameSuffix As String
  Dim hParent As WebContainer
  
  If Left(sName) <> "@" Then sName = Form_Read().Name & "." & sName

  If sName = $sName Then Return

  If $sName Then $cFromName[$sName] = Null

  Do
    If iSuffix = 0 Then
      sNameSuffix = sName
    Else
      sNameSuffix = sName & "-" & CStr(iSuffix + 1)
    Endif
    If Not $cFromName.Exist(sNameSuffix) Then 
      sName = sNameSuffix
      Break
    Endif
    Inc iSuffix
  Loop
  
  hParent = Parent_Read()
  If hParent Then hParent._UpdateChildName($sName, sName)
  
  $cFromName[sName] = $iId
  $sName = sName
  
End

Public Sub _SetForm(hForm As WebForm)
  
  $iFormId = hForm.Id
  
End

Private Function Id_Read() As Integer

  Return $iId

End

'' Return a WebControl from its identifier.

Static Public Sub FromId(Id As Integer) As WebControl
  
  Return $cFromId[Id]
  
End

'' Return a WebControl from its name.

Static Public Sub FromName(Name As String) As WebControl
  
  Try Return $cFromId[$cFromName[Name]]
  
End

Private Function Parent_Read() As WebContainer

  Dim hParent As WebContainer
  
  If $iParentId = 0 Then Return
  
  hParent = $cFromId[$iParentId]
'  If hParent.Parent And If hParent.Parent._Container = hParent Then hParent = hParent.Parent
  
  Return hParent

End

Private Sub Parent_Write(Value As WebContainer)

  Dim hParent As WebContainer
  Dim sParent As String
  Dim hForm As WebForm
  
  hParent = Parent_Read()
  
  If Value = hParent Then Return

  If Me Is WebMenu Then
    If Value Not Is WebForm And If Value Not Is WebMenu Then Error.Raise("Incorrect parent")
    Try hForm = Value
    If Not Error Then
      Value = hForm._GetMenuBar()
      Value.Show
    Endif
  Endif

  If hParent Then hParent._Remove(Me)
  
  If Value Then
    If Value._Container Then Value = Value._Container
    $iParentId = Value.Id
    $iFormId = Value.Form.Id
    Value._Add(Me)
    sParent = Value.Name
  Else 
    $iParentId = 0
  Endif
  
  '_SetProperty("#parent", sParent)

End

Private Function Name_Read() As String

  Return $sName

End

Private Function Tag_Read() As Variant

  Return $vTag

End

Private Sub Tag_Write(Value As Variant)

  $vTag = Value

End

Private Sub GetCellName() As String
  
  If Not $hCellParent Then Return $sName
  Return $sName & "|" & CStr($hCellParent.Id) & ":" & $sCellId
  
End


' Public Sub _GetKeyPressHandler() As String
'   
'   If Object.CanRaise(Me, "KeyPress") Then Return " onkeydown=\"gw.onKeyDown(" & JS(GetCellName()) & ", event)\""
'   
' End

Public Sub _GetClassId(Optional sClass As String) As String

  Dim sResult As String
  
  If Not sClass Then sClass = "gw-" & LCase(Mid$(Object.Type(Me), 4))
  If $bNoBorder Then sClass &= " gw-noborder"
  If Not Me.Enabled Then sClass &= " gw-disabled"
  If $sClass Then sClass &= " " & $sClass
  If $bHidden And If Not $hCellParent Then sClass &= " gw-hidden"
  sResult = " class=\"" & Html(sClass) & "\" id=\"" & Html(GetCellName()) & "\""
  If $sTooltip Then sResult &= " title=\"" & Html($sTooltip) & "\""
  
  Return sResult
  
End


Public Sub _BeforeRender()
  
  Print "<div"; _GetClassId();
  Me._RenderStyleSheet()
  If Object.CanRaise(Me, "KeyPress") Then Print " tabindex=\"0\"";
  Print ">";
  
End

Public Sub _Render()

End

Public Sub _AfterRender()
  
  Raise Render
  Print "</div>"
  
End

Public Sub _RenderStyleSheet()
  
  Dim hParent As WebContainer
  
  _StartStyleSheet
  
  If Not $hCellParent Then
  
    If $bIgnore Then
      
      _AddStyleSheet("position:absolute;")
      
    Else
    
      If Me Is WebContainer Then _AddStyleSheet("position:relative;")
    
      If $bExpand Then 
        _AddStyleSheet("flex-grow:1;")
      Else
        _AddStyleSheet("flex-shrink:0;")
      Endif
      
      hParent = Me.Parent
      If hParent Then
        Select Case hParent.Arrangement
          Case Arrange.Vertical
            'If bInline Then _AddStyleSheet("display:block;")
            If hParent.Spacing And If Not hParent._IsFirstVisibleChild(Me) Then _AddStyleSheet("margin-top:0.5rem;")
          Case Arrange.Horizontal
            '_AddStyleSheet("display: block;")
            If hParent.Spacing And If Not hParent._IsFirstVisibleChild(Me) Then _AddStyleSheet("margin-left:0.5rem;")
          Case Arrange.Column, Arrange.Row
            '_AddStyleSheet("display:inline-block;")
            If hParent.Spacing Then _AddStyleSheet("margin-right:0.5rem;margin-bottom:0.5rem;")
        End Select
      Endif
      
    Endif
    
  Endif
  
  If $iBackground <> Color.Default Then _AddStyleSheet("background-color:" & _GetColor($iBackground) & ";")
  If $iForeground <> Color.Default Then _AddStyleSheet("color:" & _GetColor($iForeground) & ";")
  
  If $hStyle And If Not $hStyle.IsVoid() Then $aStyleSheet.Insert($hStyle._GetStyleSheet())
  
  _EndStyleSheet
  
End

Public Sub _StartStyleSheet()
  
  Inc $iStyleSheet
  If $iStyleSheet = 1 Then $aStyleSheet = New String[]
  
End

Public Sub _AddStyleSheet(sStyle As String)
  
  $aStyleSheet.Add(sStyle)
  
End

Public Sub _RemoveStyleSheet(sStyle As String)
  
  Try $aStyleSheet.Remove($aStyleSheet.Find(sStyle))
  
End


Public Sub _EndStyleSheet()
  
  Dec $iStyleSheet
  If $iStyleSheet Then Return
  
  If $aStyleSheet.Count Then
    'Print "#"; Me.Name; " {"
    'Print "  "; $aStyleSheet.Join("\n  ")
    'Print "}"
    Print " style=\""; $aStyleSheet.Join(""); "\"";
    $aStyleSheet.Clear
  Endif
  
End

Private Function Expand_Read() As Boolean

  Return $bExpand

End

Private Sub Expand_Write(Value As Boolean)

  If $bExpand = Value Then Return
  $bExpand = Value
  Try Me.Parent.Refresh

End

Private Function Style_Read() As WebControlStyle

  If Not $hStyle Then $hStyle = New WebControlStyle As "Style"
  Return $hStyle

End

Private Function Form_Read() As WebForm

  Try Return $cFromId[$iFormId]

End

' Public Sub _SetProperty(sProp As String, vValue As Variant)
' 
'   Dim cProp As Collection
' 
'   If Me.Form._Loaded Then
'     
'     If WebForm._InExec Then Me.Refresh
'     
'     If TypeOf(vValue) = gb.Object And If vValue Is WebControl Then 
'       sProp = "@" & sProp
'       vValue = vValue.Name
'     Endif
'     
'     cProp = Session[$sName]
'     If Not cProp Then cProp = New Collection
'     cProp[sProp] = vValue
'     Session[$sName] = cProp
'     
'   Endif
'   
' End
' 
' Public Sub _InitSpecialProperty((sProp) As String, (vVal) As Variant)
'   
' End
' 
' Public Sub _InitProperties()
' 
'   Dim cProp As Collection
'   Dim vVal As Variant
'   Dim sProp As String
'   
'   If Not Session.Id Then Return
'   
'   Try cProp = Session[$sName]
'   If Not cProp Then Return
'   
'   Object.Lock(Me)
'   For Each vVal In cProp
'     sProp = cProp.Key
'     'WebForm.Print("set " & sProp)
'     If Left(sProp) = "#" Then
'       If sProp = "#style" Then
'         $hStyle = New WebControlStyle As "Style"
'         $hStyle._Style = vVal
'       ' Else If sProp = "#parent" Then
'       '   Parent_Write(FromName(vVal))
'       Else
'         Me._InitSpecialProperty(sProp, vVal)
'       Endif
'     Else If Left(sProp) = "@" Then
'       Object.SetProperty(Me, Mid$(sProp, 2), WebControl.FromName(vVal))
'     Else
'       Try Object.SetProperty(Me, sProp, vVal)
'     Endif
'   Next
'   Object.Unlock(Me)
'   
' End

' Public Sub Style_Change()
'   
'   _SetProperty("#style", $hStyle._Style)
'   
' End

'' Return if the control or one of its parent is hidden.

Public Sub IsHidden() As Boolean
  
  Dim hCtrl As WebControl
  
  hCtrl = Me
  While hCtrl
    If Not hCtrl.Visible Then Return True
    hCtrl = hCtrl.Parent
  Wend
  
End

Public Sub _CanRefresh() As Boolean
  
  'WebForm.PrintLog("_CanRefresh " & Me.Name & " ?")
  
  If _Refresh Then 
    'WebForm.PrintLog("_CanRefresh " & Me.Name & " --> no (_Refresh)")
    Return
  Endif
  
  If _NoRefresh Then 
    'WebForm.PrintLog("_CanRefresh " & Me.Name & " --> no (_NoRefresh)")
    Return
  Endif
  
  If WebForm._InMessage = 0 Then 
    'WebForm.PrintLog("_CanRefresh " & Me.Name & " --> no (_InMessage)")
    Return
  Endif
  
  If WebForm._DisableRefresh Then 
    'WebForm.PrintLog("_CanRefresh " & Me.Name & " --> no (_DisableRefresh)")
    Return
  Endif
  
  If Not Form_Read()._Loaded Then
    'WebForm.PrintLog("_CanRefresh " & Me.Name & " --> no (Form not loaded)")
    Return
  Endif
  
  If IsHidden() Then 
    'WebForm.PrintLog("_CanRefresh " & Me.Name & " --> no (IsHidden)")
    Return
  Endif

  If $iParentId And If Not Parent_Read()._CanRefresh() Then
    'WebForm.PrintLog("_CanRefresh " & Me.Name & " --> no (Parent)")
    Return
  Endif

  'WebForm.PrintLog("_CanRefresh " & Me.Name & " --> yes !")
  Return True
  
End

'' Refresh the control.

Public Sub Refresh()

  If Not _CanRefresh() Then
    'WebForm.PrintLog("Cannot refresh " & Me.Name & ": " & WebForm._InMessage & " / " & _NoRefresh & " / " & IsHidden() & " / " & _Refresh)
    Return  
  Else
    'WebForm.PrintLog("Refresh: " & Me.Name)
  Endif
  
  _Refresh = True
  WebForm._HasRefresh = True
  
  Me._CancelChildrenRefresh()
  
End

Public Sub _CancelRefresh()
  
  'WebForm.PrintLog("Cancel refresh: " & Me.Name)
  _Refresh = False
  Me._CancelChildrenRefresh()
  
End

Public Sub _CancelChildrenRefresh()

End

Public Sub _RefreshReply() As Boolean
  
  Dim hFile As File
  Dim sResult As String
  
  If Not _Refresh Then Return
  
  WebForm.PrintLog("_RefreshReply: " & Me.Name)
    
  hFile = Open String For Write
  Output To #hFile
  
  If _Naked Then
    Me._Render()
  Else
    _Redraw()
  Endif
  
  sResult = Close #hFile
  Output To Default
  
  'WebForm._AddRefresh("$(" & JS(Me.Name) & ").outerHTML = " & JS(sResult) & ";")
  
  If _Naked Then
    Print "gw.setInnerHtml("; JS(Me.Name); ","; JS(sResult); ");"
  Else
    Print "gw.setOuterHtml("; JS(Me.Name); ","; JS(sResult); ");"
    'Print "$("; JS(Me.Name); ").outerHTML = "; JS(sResult); ";"
  Endif
  
  _Refresh = False
  Return True
  
Catch
  
  Output To Default
  Error.Propagate()
  
End

Public Sub _GetEventJS(sProp As String, sEvent As String, Optional sArg As String) As String
  
  Dim sStr As String
  
  If Not Object.CanRaise(Me, sEvent) Then 
    If Not $hCellParent Then Return
    If Not Object.CanRaise($hCellParent, sEvent) Then Return
  Endif
  
  sStr = " " & sProp & "=\"gw.raise(" '& JS(Me.Form.Name) & "," 
  If Me Is WebForm Then
    sStr &= "null"
  Else
    sStr &= JS(GetCellName())
  Endif
  sStr &= "," & JS(sEvent)
  If sArg Then sStr &= "," & sArg
  sStr &= ");"
  sStr &= "\""
  
  If sProp = "onclick" Then sStr &= " onmousedown=\"event.stopPropagation();\""
  
  Return sStr
  
End

Public Sub _GetUpdateJS(sEvent As String, sProp As String, Optional sGetValue As String = "null", Optional sMore As String) As String
  
  Dim sStr As String
  sStr = " " & sEvent & "=\"gw.update(" & JS(GetCellName()) & "," & JS(sProp) & "," & sGetValue & ");"
  If sMore Then sStr &= sMore
  Return sStr & "\""
  
End

Public Sub _GetUpdateWaitJS(sEvent As String, sProp As String, Optional sGetValue As String = "null", Optional sMore As String) As String
  
  Dim sStr As String
  sStr = " " & sEvent & "=\"gw.updateWait(" & JS(GetCellName()) & "," & JS(sProp) & "," & sGetValue & ");"
  If sMore Then sStr &= sMore
  Return sStr & "\""
  
End

' Public Sub _UpdateProperty((sProp) As String, (vValue) As Variant)
'   
' End

Private Function Width_Read() As String

  If $hStyle Then Return $hStyle["width"]

End

Private Sub Width_Write(Value As String)

  Style_Read()["width"] = Value
  Me.Refresh

End

Private Function Height_Read() As String

  If $hStyle Then Return $hStyle["height"]

End

Private Sub Height_Write(Value As String)

  Style_Read()["height"] = Value
  Me.Refresh

End

Private Function Visible_Read() As Boolean

  Return Not $bHidden

End

Private Sub Visible_Write(Value As Boolean)

  Dim bCanRefresh As Boolean
  
  If $bHidden <> Value Then Return
  
  $bHidden = False
  bCanRefresh = _CanRefresh()
  $bHidden = Not Value
  
  If bCanRefresh Then 
    WebForm._AddJavascript("gw.setVisible(" & JS(Me.Name) & "," & JS(Not $bHidden) & ")")
    If Me.Parent Then 
      Me.Parent.Refresh
    Else If Me Is WebContainer Then 
      Refresh
    Endif
  Endif
  'Me.Parent.Refresh
  
  ' If Value Then
  '   If $hStyle Then Style_Read()["display"] = ""
  ' Else
  '   Style_Read()["display"] = "none"
  ' Endif

End

Private Function Ignore_Read() As Boolean

  Return $bIgnore

End

Private Sub Ignore_Write(Value As Boolean)

  If $bIgnore = Value Then Return
  $bIgnore = Value
  Me.Parent.Refresh

End

'' Set the focus on the control.
''
'' - ~Highlight~ is an optional argument that specify if the control contents must be highlighted. It usually works only for TextBox or TextArea controls.

Public Sub SetFocus(Optional Highlight As Boolean)

  Dim sName As String
  
  sName = $sName
  If _Proxy Then sName &= _Proxy
  
  WebForm._AddJavascript("gw.setFocus(" & JS(sName) & ")")
  If Highlight Then WebForm._AddJavascript("gw.highlightMandatory(" & JS(sName) & ")")
  
End

Private Function Enabled_Read() As Boolean

  If $bDisabled Then Return
  If $iParentId = 0 Then Return True
  Return Parent_Read().Enabled

End

Private Sub Enabled_Write(Value As Boolean)

  If $bDisabled <> Value Then Return
  $bDisabled = Not Value
  Me.Refresh

End

Private Function Background_Read() As Integer

  Return $iBackground

End

Private Sub Background_Write(Value As Integer)

  If $iBackground = Value Then Return
  $iBackground = Value
  Me.Refresh

End

Private Function Foreground_Read() As Integer

  Return $iForeground

End

Private Sub Foreground_Write(Value As Integer)

  If $iForeground = Value Then Return
  $iForeground = Value
  Me.Refresh
  

End

Static Public Sub _GetColor(iCol As Integer) As String

  Dim A As Integer
  Dim R As Integer
  Dim G As Integer
  Dim B As Integer

  A = Lsr(iCol, 24)
  R = Lsr(iCol, 16) And 255
  G = Lsr(iCol, 8) And 255
  B = iCol And 255
  
  If A Then
    Return "rgba(" & CStr(R) & "," & CStr(G) & "," & CStr(B) & "," & CStr(Round(A / 255, -2)) & ")"
  Else
    Return "#" & Hex$(R, 2) & Hex$(G, 2) & Hex$(B, 2)
  Endif

End

'' Raise the control.

Public Sub Raise()

  Dim hParent As WebContainer
  
  hParent = Parent_Read()
  If hParent Then hParent._Raise($sName)
  
End

'' Lower the control.

Public Sub Lower()

  Dim hParent As WebContainer
  
  hParent = Parent_Read()
  If hParent Then hParent._Lower($sName)
  
End

Static Public Sub _GetNames() As String
  
  Dim aKey As New String[]
  
  For Each $cFromName
    aKey.Add($cFromName.Key)
  Next
  
  Return aKey.Join(",")
  
End

'' Delete the control

Public Sub Delete()

  Dim hParent As WebContainer
  
  WebForm.PrintLog("Delete " & Me.Name)

  hParent = Parent_Read()
  If hParent Then hParent._Remove(Me)
  
  Object.Detach(Me)
  $cFromName[$sName] = Null
  $cFromId[$iId] = Null
  _Invalid = True
  Dec $iCount
  'WebForm.PrintLog("==== " & $iCount & " controls")
  'Debug $sName;; $iId;; System.Backtrace.Join(" ")
  
End

'' Show the control.
''
'' Setting the [../visible] property to TRUE has the same effect.

Public Sub Show()
  
  Me.Visible = True
  
End

'' Hide the control.
''
'' Setting the [../visible] property to FALSE has the same effect.

Public Sub Hide()
  
  Me.Visible = False
  
End

' Public Sub _GetBaseName() As String
' 
'   Dim iPos As Integer
'   
'   iPos = InStr($sName, ".")
'   If iPos Then
'     Return Mid$($sName, iPos + 1)
'   Else
'     Return $sName
'   Endif
'   
' End

Private Function Border_Read() As Boolean

  Return $bNoBorder

End

Private Sub Border_Write(Value As Boolean)

  If $bNoBorder <> Value Then Return
  $bNoBorder = Not Value
  Me.Refresh

End

Private Function Class_Read() As String

  Return $sClass

End

Private Sub Class_Write(Value As String)

  If $sClass = Value Then Return
  $sClass = Value
  Me.Refresh

End

Private Function Tooltip_Read() As String

  Return $sTooltip

End

Private Sub Tooltip_Write(Value As String)

  If $sTooltip = Value Then Return
  $sTooltip = Value
  Me.Refresh

End

Public Sub _GetLink(sLink As String) As String
  
  If sLink Begins "http://" Or If sLink Begins "https://" Then
    Return sLink 'Application.Protocol &/ Mid$(sLink, InStr(sLink, ":"))
  Else
    Return "/" &/ Application.Root &/ sLink
  Endif
  
End


Public Sub _GetImageLink(sImage As String) As String

  ' If Left(sImage) = "/" Then
  '   Return Application.Root &/ "img:" & Me.Name & "?z=" & Base64(Format(Now, "hhnnssuuu"))
  ' Else
  '   Return Application.Root &/ sImage
  ' Endif
  
  If sImage Begins "icon:/" Then
    Return "/" &/ Application.Root &/ "icon:" & Replace(Mid$(sImage, 7), "/", ":")
  Else 
    Return _GetLink(sImage)
  Endif
  
End


Private Sub Name_Write(Value As String)

  SetName(Value)

End

'' Add a specific class to the [../class] property.

Public Sub AddClass((Class) As String)

  Dim aClass As String[]
  Dim sClass As String
  
  sClass = Trim(Class)
  If Not sClass Then Return
  
  aClass = Split($sClass, " ")
  
  For Each sClass In Split(sClass, " ", "", True)
  
    If aClass.Exist(sClass) Then Continue
    aClass.Add(sClass)
    
  Next
  
  Class_Write(aClass.Join(" "))
  
End

'' Remove a specific class from the [../class] property.

Public Sub RemoveClass((Class) As String)
  
  Dim aClass As String[]
  Dim iPos As Integer
  Dim sClass As String
  
  sClass = Trim(Class)
  If Not sClass Then Return
  
  aClass = Split($sClass, " ")
  
  For Each sClass In Split(sClass, " ", "", True)
  
    iPos = aClass.Find(sClass)
    If iPos < 0 Then Continue
  
    aClass.Remove(iPos)
  
  Next
  
  Class_Write(aClass.Join(" "))
  
End

Private Function Font_Read() As String

  Dim aFont As New String[]
  Dim sFamily As String
  Dim sWeight As String
  Dim sStyle As String
  Dim sSize As String
  Dim sDecoration As String

  If Not $hStyle Then Return

  sFamily = $hStyle["font-family"]
  sWeight = $hStyle["font-weight"]
  sStyle = $hStyle["font-style"]
  sDecoration = $hStyle["font-decoration"]
  sSize = $hStyle["font-size"]

  If sFamily Then aFont.Add(sFamily)
  
  If sWeight = "normal" And If sStyle = "normal" And If sDecoration = "none" Then
    
    aFont.Add("normal")
    
  Else
  
    If sWeight Then
      If sWeight <> "bold" Then sWeight = "weight:" & sWeight
      aFont.Add(sWeight)
    Endif
    
    If sStyle Then
      If sStyle <> "italic" Then sStyle = "style:" & sStyle
      aFont.Add(sStyle)
    Endif
    
    If sDecoration Then
      If sDecoration = "underline" Then
        aFont.Add(sDecoration)
      Else If sDecoration = "line-through" Then
        aFont.Add("strikeout")
      Else
        aFont.Add("decoration:" & sDecoration)
      Endif
    Endif
    
  Endif
  
  If sSize Then 
    If Not IsDigit(Left(sSize)) Then sSize = "size:" & sSize
    aFont.Add(sSize)
  Endif
  
  Return aFont.Join()

End

Private Sub Font_Write(Value As String)

  Dim sElt As String

  For Each sElt In Split(Value)
    
    sElt = Trim(sElt)
    If Not sElt Then Continue
    
    If IsDigit(Left(sElt)) Then
      Style_Read()["font-size"] = sElt
      Continue
    Endif
    
    If sElt Begins "weight:" Then
      Style_Read()["font-weight"] = Mid$(sElt, InStr(sElt, ":") + 1)
      Continue
    Endif
    
    If sElt Begins "style:" Then
      Style_Read()["font-style"] = Mid$(sElt, InStr(sElt, ":") + 1)
      Continue
    Endif
    
    If sElt Begins "decoration:" Then
      Style_Read()["text-decoration"] = Mid$(sElt, InStr(sElt, ":") + 1)
      Continue
    Endif
    
    If sElt Begins "size:" Then
      Style_Read()["font-size"] = Mid$(sElt, InStr(sElt, ":") + 1)
      Continue
    Endif
    
    Select Case sElt
      Case "normal"
        Style_Read()["font-weight"] = "normal"
        Style_Read()["font-style"] = "normal"
        Style_Read()["text-decoration"] = "none"
      Case "bold"
        Style_Read()["font-weight"] = sElt
      Case "italic"
        Style_Read()["font-style"] = sElt
      Case "italic"
        Style_Read()["font-style"] = sElt
      Case "underline"
        Style_Read()["text-decoration"] = sElt
      Case "strikeout"
        Style_Read()["text-decoration"] = "line-through"
      Case Else
        Style_Read()["font-family"] = sElt
    End Select
    
  Next

  Me.Refresh
  
End

Public Sub _UpdateProperty((sProp) As String, (vValue) As Variant)
  
End

Public Sub _Redraw()
  
  Me._BeforeRender()
  Me._Render()
  Me._AfterRender()
  '_Refresh = False
  
End

Public Sub ToHTML() As String

  Dim hStr As File
  Dim sStr As String
  
  hStr = Open String For Write 
  Output To hStr
  Try _Redraw
  Output To Default
  sStr = Close hStr
  Return sStr
  
End

Public Sub _RaiseKeyPress(cEvent As Variant) As Boolean
  
  Dim cSave As Collection
  Dim bCancel As Boolean
  
  cSave = Key._Event
  Key._Event = cEvent
  bCancel = Raise KeyPress
  Key._Event = cSave
  WebForm.Print("_RaiseKeyPress: " & Str(bCancel))
  Return bCancel
  
End

Public Sub _RegisterShortcut(sShortcut As String, sPrevious As String)

  Dim aShortcut As Integer[]
  Dim iPos As Integer
  
  If sPrevious Then
    sPrevious = String.UCase(sPrevious)
    aShortcut = _Shortcuts[sPrevious]
    If aShortcut Then
      iPos = aShortcut.Find($iId)
      If iPos Then aShortcut.Remove(iPos)
    Endif
  Endif
  
  If sShortcut Then
    sShortcut = String.UCase(sShortcut)
    aShortcut = _Shortcuts[sShortcut]
    If Not aShortcut Then 
      aShortcut = New Integer[]
      _Shortcuts[sShortcut] = aShortcut
    Endif
    aShortcut.Add($iId)
  Endif

End

Public Sub _GetTopLevel() As WebForm

  Dim hForm As WebForm
  Dim hParent As WebContainer
  
  hForm = Me.Form
  Do
    hParent = hForm.Parent
    If Not hParent Or If hForm._Window Then Return hForm
    hForm = hForm.Form
  Loop
  
End

Static Public Sub _SetCurrentCell(Optional hCtrl As WebControl, sCell As String)
  
  $hCellParent = hCtrl
  $sCellId = sCell
  
End
