' Gambas class file

Export
Create Static

Class Window
Class Desktop
Class DesktopWindow
Class Screens

Static Property Read DefaultDir As String

Static Private $sStr As String
Static Private $iPos As Integer

Property Read Keys As _Settings_Keys
Property Read Path As String

'' Return the number of entries in the settings file
Property Read Count As Integer

Private $sPath As String
Private $sTitle As String
Private $cSlot As Collection
Private $bModify As Boolean
Private $bModifyAll As Boolean
Private $cModify As Collection

Private Sub Load()
  
  Dim hFile As File
  Dim iLine As Integer
  Dim sLine As String
  Dim sSlot As String
  Dim iPos As Integer
  Dim hCol As Collection

  'Debug $sPath

  $cSlot = New Collection
  $cModify = New Collection
  If Not Exist($sPath) Then 
    '$dDateLoad = Now
    Return
  Endif

  '$dDateLoad = Stat($sPath).LastModified

  hFile = Open $sPath

  While Not Eof(hFile)

    Inc iLine
    Line Input #hFile, sLine
    sLine = Trim(sLine)
    If Not sLine Then Continue
    If InStr("#;'", Left$(sLine)) Then Continue

    If Left$(sLine) = "[" Then
      If Right$(sLine) = "]" Then
        sSlot = Mid$(sLine, 2, -1)
        hCol = New Collection
        $cSlot[sSlot] = hCol
        Continue
      Else
        sSlot = False
      Endif
    Endif

    If Not sSlot Then Continue

    iPos = InStr(sLine, "=")

    $cSlot[sSlot][Trim(Left$(sLine, iPos - 1))] = FromString(Trim(Mid$(sLine, iPos + 1)))

  Wend

  Close #hFile

Catch

  If iLine Then
    Error.Raise("Syntax error in settings file at line #" & iLine & ": " & Error.Where & ": " & Error.Text)
  Else
    Error.Raise(Error.Text)
  Endif
  
End

Public Sub _new(Optional Path As String, Optional Title As String)

  Dim sPath As String
  Dim sElt As String

  If Left(Path) <> "/" And If Left(Path) <> "~" Then 
    If Not Path Then
      Path = Settings.DefaultDir &/ Application.Name & ".conf"
    Else If Path Begins "./" Then
      Path = "." & Path
    Else If Path Begins "../" Then
    Else
      Path = Settings.DefaultDir &/ Path & ".conf"
    Endif
    If Left(Path) = "/" Then
      For Each sElt In Split(Settings.DefaultDir, "/")
        sPath &/= sElt
        Try Mkdir "/" & sPath
      Next
    Endif
  Endif

  $sTitle = Title

  $sPath = Path
  
  Load()

End

Public Sub _free()

  Try Me.Save
  If Error Then Error "gb.settings: warning: unable to save settings: "; $sPath; ": "; Error.Where;; Error.Text

End

Public Sub Save()

  Dim aKey As New String[]
  Dim cSave As Collection
  Dim cSlot As Collection
  Dim sKey As String
  Dim hFile As File
  Dim vVal As Variant
  Dim sTemp As String
  Dim cModify As Collection
  Dim sSlot As String

  If Not $bModify Then Return

  If Not IsDir(File.Dir($sPath)) Then 
    Error "gb.settings: warning: unable to save settings: directory does not exist: "; File.Dir($sPath)
    Return
  Endif

  'Debug $sPath

  $bModify = False
  
  sTemp = $sPath & "." & CStr(Application.Id) & "~"
  Try Kill sTemp

  If Not $bModifyAll Then

    cSave = $cSlot
    cModify = $cModify
    Load
    For Each cModify
      sKey = cModify.Key
      sSlot = GetSlot(sKey)
      sKey = File.Name(sKey)
      If cSave.Exist(sSlot) Then 
        Me[sSlot &/ sKey] = cSave[sSlot][sKey]
      Else
        Me[sSlot &/ sKey] = Null
      Endif
    Next
    
  Endif

  For Each cSlot In $cSlot
    aKey.Add($cSlot.Key)
  Next
  aKey.Sort

  hFile = Open sTemp For Create 

  If $sTitle Then
    Print #hFile, "# "; $sTitle
  Endif

  For Each sKey In aKey
    
    cSlot = $cSlot[sKey]
    If cSlot.Count Then
      Print #hFile, "[" & sKey & "]"
      For Each vVal In cSlot
        Print #hFile, cSlot.Key; "="; ToString(vVal)
      Next
      Print #hFile
    Endif
  Next

  Close #hFile
  
  Try Move sTemp Kill $sPath
  
Catch
  
  Error.Raise("Unable to save settings: " & Error.Where & " " & Error.Text)

End

Private Function GetSlot(sKey As String) As String

  Dim sSlot As String

  sSlot = File.Dir(sKey)
  If Not sSlot Then sSlot = "/"
  If sSlot = "/" Then
    sSlot = "General"
  Endif
  If Left(sSlot) = "/" Then sSlot = Mid$(sSlot, 2)

  Return sSlot

End

Public Function _get(Key As String, Optional {Default} As Variant) As Variant

  Dim hSlot As Collection
  Dim sSlot As String
  'Dim dDate As Date

  sSlot = GetSlot(Key)
  Key = File.Name(Key)
  
  hSlot = $cSlot[sSlot]
  If hSlot And If hSlot.Exist(Key) Then
    Return hSlot[Key]
  Endif

  Return {Default}

End

'' Return if the specified settings key has a value

Public Sub Exist(Key As String) As Boolean
  
  Dim hSlot As Collection
  Dim sSlot As String
  'Dim dDate As Date

  sSlot = GetSlot(Key)
  Key = File.Name(Key)
  
  hSlot = $cSlot[sSlot]
  If hSlot And If hSlot.Exist(Key) Then Return True
  
End

Private Sub SameSetting(vOld As Variant, vNew As Variant) As Boolean
  
  Dim I As Integer
  Dim vOldVal As Variant
  Dim vNewVal As Variant
  
  If IsNull(vOld) And If IsNull(vNew) Then Return True
  If TypeOf(vOld) <> gb.Object And If TypeOf(vNew) <> gb.Object Then Return vOld = vNew
  If TypeOf(vOld) <> gb.Object Or If TypeOf(vNew) <> gb.Object Then Return False
  
  If Not (vOld Is Array) Then Return
  If Not (vNew Is Array) Then Return
  If vOld.Count <> vNew.Count Then Return
  If vOld = vNew Then Return
  
  For I = 0 To vOld.Max
    vOldVal = vOld[I]
    vNewVal = vNew[I]
    If TypeOf(vOldVal) = gb.Object Or If TypeOf(vNewVal) = gb.Object Then Return
    If vOldVal <> vNewVal Then Return
  Next
  
  Return True
  
End


Public Sub _put(Value As Variant, Key As String)

  Dim hSlot As Collection
  Dim sSlot As String

  sSlot = GetSlot(Key)
  hSlot = $cSlot[sSlot]
  If Not hSlot Then
    hSlot = New Collection
    $cSlot[sSlot] = hSlot
  Endif

  Key = File.Name(Key)

  If Not SameSetting(hSlot[Key], Value) Then
    hSlot[Key] = Value
    $cModify[sSlot &/ Key] = True
    $bModify = True
    'Save()
  Endif

End


Public Sub Clear(Optional ParentKey As String, Recursive As Boolean)

  Dim sSlot As String
  Dim hSlot As Collection
  Dim vVal As Variant
  Dim sRemove As String

  If Not ParentKey Then
    If $cSlot.Count Then
      $cSlot.Clear
      $bModify = True
      $bModifyAll = True
    Endif
    Return
  Endif
  
  sSlot = GetSlot(ParentKey &/ "g")
  
  If Not Recursive Then
    hSlot = $cSlot[sSlot]
    If hSlot Then 
      sRemove = sSlot
      GoSub REMOVE_SLOT
    Endif
  Else
    
    For Each hSlot In $cSlot
      sRemove = $cSlot.Key
      If sRemove = sSlot Or If sRemove Begins sSlot & "/" Then
        GoSub REMOVE_SLOT
      Endif
    Next
  Endif
  
  Return
  
REMOVE_SLOT:

  For Each vVal In hSlot
    $cModify[sRemove &/ hSlot.Key] = True
  Next
  $cSlot.Remove(sRemove)
  $bModify = True
  Return

End

Private Sub ReadWindow(hWindow As Window, sKey As String)

  Dim aPos As Integer[]
  Dim X, Y, W, H, S As Integer
  ' Dim D As Integer
  ' Dim hObserver As Observer

  aPos = Me[sKey &/ "Geometry"]

  If Not aPos Or If aPos.Count < 2 Then Return
  
  X = aPos[0]
  Y = aPos[1]
  If aPos.Count > 2 Then
    W = aPos[2]
    H = aPos[3]
    If aPos.Count > 4 Then
      S = aPos[4]
      If S >= Screens.Count Then S = 0
    Endif
  Else
    W = hWindow.W
    H = hWindow.H
  Endif

  X += Screens[S].AvailableX
  Y += Screens[S].AvailableY

  If hWindow.Resizable Then
    W = Max(32, W)
    H = Max(32, H)
    If hWindow.Modal Then
      hWindow.Resize(W, H)
      hWindow.Center
    Else
      hWindow.Move(X, Y, W, H)
    Endif
  Else
    If Not hWindow.Modal Then hWindow.Move(X, Y)
  Endif
  
  If aPos.Count > 5 And If aPos[5] Then hWindow.Maximized = True

End

Private Sub WriteWindow(hWindow As Window, sKey As String)

  Dim X, Y, W, H, S As Integer
  'Dim D As Integer
  Dim aVal As Integer[]
  
  X = hWindow.X
  Y = hWindow.Y
  W = hWindow.Width
  H = hWindow.Height

  If hWindow.TopLevel Then
  
    S = hWindow.Screen
    
    If S >= 0 Then
      X -= Screens[S].AvailableX
      Y -= Screens[S].AvailableY
    Else
      S = 0
    Endif
    
  Endif
  
  aVal = [X, Y, W, H, S, If(hWindow.Maximized, 1, 0)]
  
  ' If Not hWindow.Parent And If Component.IsLoaded("gb.desktop") Then
  '   hDesktopWin = New DesktopWindow(hWindow.Id)
  '   D = -1
  '   Try D = hDesktopWin.Desktop
  '   If Error Then Debug Error.Text
  '   Debug hWindow.Name;; "Desktop:";; D
  '   If D >= 0 Then aVal.Add(D)
  ' Endif

  Me[sKey &/ "Geometry"] = aVal

End

Private Sub GetTopLevel(hCtrl As Object) As String
  
  Return Object.Type(hCtrl.Window)
  
End

Public Sub Read(hObject As Object, Optional sKey As String, Optional vDefault As Variant)

  If Object.Is(hObject, "Window") Then
    If Not sKey Then sKey = Object.Type(hObject) 
    ReadWindow(hObject, sKey)
  Else
    If Not sKey Then 
      Try sKey = GetTopLevel(hObject) &/ hObject.Name
    Else If Left(sKey) <> "/" Then
      Try sKey = GetTopLevel(hObject) &/ sKey
    Endif
    Try hObject.Settings = Me[sKey, vDefault]
  Endif

End

Public Sub Write(hObject As Object, Optional sKey As String)

  If Object.Is(hObject, "Window") Then
    If Not sKey Then sKey = Object.Type(hObject) 
    WriteWindow(hObject, sKey)
  Else
    If Not sKey Then 
      Try sKey = GetTopLevel(hObject) &/ hObject.Name
    Else If Left(sKey) <> "/" Then
      Try sKey = GetTopLevel(hObject) &/ sKey
    Endif
    Try Me[sKey] = hObject.Settings
  Endif

End

Private Function Path_Read() As String

  Return $sPath

End

' Static Public Function Array(...) As String[]
'   
'   Dim aVal As New String[]
'   Dim iInd As Integer
'   Dim sVal As String
'   Dim vVal As Variant
'   
'   For iInd = 0 To Param.Max
'     vVal = Param[iInd]
'     If IsBoolean(vVal) Then 
'       sVal = IIf(vVal, "1", "0")
'     Else
'       sVal = CStr(vVal)
'     Endif
'     aVal.Add(sVal)
'   Next
'   
'   Return aVal
'   
' End

' STATIC PUBLIC FUNCTION FromString(Value AS String) AS String[]
'   
'   DIM aRet AS NEW String[]
'   DIM iInd AS Integer
'   
'   aRet = Split(Value, ",", "\"")
'   FOR iInd = 0 TO aRet.Max
'     aRet[iInd] = Replace(aRet[iInd], "\"\"", "\"")
'   NEXT
'   
'   RETURN aRet
'   
' END
' 

Public Sub Reload()
  
  Load
  
End

Private Function Keys_Read() As _Settings_Keys

  _Settings_Keys._Slot = $cSlot
  _Settings_Keys._Parent = ""
  Return _Settings_Keys

End

Static Private Function DefaultDir_Read() As String

  Dim sPath As String = Application.Env["XDG_CONFIG_HOME"]
  If Not sPath Then sPath = System.User.Home &/ ".config"
  Return sPath &/ "gambas" & System.Version

End

Static Private Sub WriteValue(vVal As Variant)
  
  Dim sStr As String
  Dim iPos As Integer
  Dim aArray As Array
  Dim cCol As Collection
  
  Select Case TypeOf(vVal)
    
    Case gb.Null
      $sStr &= "Null"
    
    Case gb.Boolean
      If vVal Then
        $sStr &= "True"
      Else
        $sStr &= "False"
      Endif
    
    Case gb.Byte, gb.Short, gb.Integer, gb.Long
      $sStr &= CStr(vVal)
    
    Case gb.Float
      sStr = CStr(vVal)
      If InStr(sStr, ".") = 0 And If InStr(sStr, "E", 1, gb.IgnoreCase) = 0 Then sStr &= ".0"
      $sStr &= sStr
    
    Case gb.Date
      $sStr &= Chr$(34) & CStr(vVal) & Chr$(34)
    
    Case gb.String
      sStr = Quote(vVal)
      Do
        iPos = InStr(sStr, "\\", iPos + 1)
        If iPos = 0 Then Break
        If Mid$(sStr, iPos + 1, 1) = "x" Then
          Mid$(sStr, iPos, 4) = "\\u00" & Mid$(sStr, iPos + 1, 2)
        Else
          Inc iPos
        Endif
      Loop
      $sStr &= sStr
    
    Case Else
      If vVal Is Array Then
        aArray = vVal
        $sStr &= "["
        For iPos = 0 To vVal.Max
          If iPos Then $sStr &= ","
          WriteValue(vVal[iPos])
        Next
        $sStr &= "]"
      Else If vVal Is Collection Then
        cCol = vVal
        $sStr &= "{"
        For Each vVal In cCol
          If iPos Then $sStr &= ","
          WriteValue(cCol.Key)
          $sStr &= ": "
          WriteValue(vVal)
          Inc iPos
        Next
        $sStr &= "}"
      Else 
        Error.Raise("Only arrays and collection can be written to a settings file")
      Endif
    
  End Select
    
End

'' Convert a value into its settings internal string representation

Static Public Sub ToString(Value As Variant) As String
  
  $sStr = ""
  WriteValue(Value)
  Return $sStr
  
End

Static Private Sub ConvertArray(aArray As Variant[]) As Object

  Dim iType As Integer
  Dim iInd As Integer
  Dim aBoolean As Boolean[]
  Dim aInteger As Integer[]
  Dim aFloat As Float[]
  Dim aString As String[]
  Dim aObject As Object[]
  
  iType = TypeOf(aArray[0])
  For iInd = 1 To aArray.Max
    If TypeOf(aArray[iInd]) <> iType Then Return aArray
  Next
  
  Select Case iType
    Case gb.Boolean
      aBoolean = aArray
      Return aBoolean
    Case gb.Integer
      aInteger = aArray
      Return aInteger
    Case gb.Float
      aFloat = aArray
      Return aFloat
    Case gb.String
      aString = aArray
      Return aString
    Case gb.Object
      aObject = aArray
      Return aObject
    Default
      Return aArray
  End Select
  
End

Static Private Sub ReadValue(Optional bNotStrict As Boolean) As Variant
  
  Dim sToken As String
  Dim sCar As String
  Dim sString As String
  Dim iPos As Integer
  Dim cObject As Collection
  Dim sKey As String
  Dim aArray As Object
  Dim aVariant As Variant[]
  Dim vNumber As Variant
  Dim bFloat As Boolean
  Dim sNumber As String
  
  'sCar = ReadToken()
  GoSub READ_TOKEN
  
  If sToken = "{" Then
    GoSub READ_OBJECT
    Return cObject
  Else If sToken = "[" Then
    GoSub READ_ARRAY
    Return aArray
  Else If sToken = Chr$(34) Then
    GoSub READ_STRING
    Return sString
  Else If sToken = "-" Or If IsDigit(sToken) Then
    GoSub READ_NUMBER
    Return vNumber
  Else If sToken == "null" Then
    Return Null
  Else If sToken == "true" Then
    Return True
  Else If sToken == "false" Then
    Return False
  Else If bNotStrict Then
    Return $sStr
  Else
    Error.Raise("Incorrect token: " & Quote(sCar))
  Endif
  
READ_TOKEN:
  
  GoSub READ_CHAR
  sToken = sCar
  If Not IsLetter(sCar) Then Return

  Do
    GoSub GET_CHAR
    If Not sCar Then Break
    If Not IsLetter(sCar) Then 
      Dec $iPos
      Break
    Endif
    sToken &= sCar
  Loop
  
  Return

GET_CHAR:  
  
  If $iPos > Len($sStr) Then 
    sCar = ""
    Return
  Endif
  sCar = Mid$($sStr, $iPos, 1)
  Inc $iPos
  Return

READ_CHAR:

  Do
    GoSub GET_CHAR
    If Not sCar Or If sCar > " " Then Return
  Loop
  
READ_STRING:
  
  sString = ""
  
  Do
    GoSub GET_CHAR
    If Not sCar Then Error.Raise("Non terminated string")
    If sCar = Chr$(34) Then Return sString
    If sCar = "\\" Then
      GoSub GET_CHAR
      If Not sCar Then Error.Raise("Non terminated string")
      iPos = InStr("bfrtn", sCar)
      If iPos Then
        sCar = Mid$("\b\f\r\t\n", iPos, 1)
      ' Else If sCar = "u" Then
      '   Try sCar = String.Chr$(Val("&H" & Mid$($sStr, $iPos, 4)))
      '   If Not Error Then $iPos += 4
      Else
        ' Keep character
      Endif
    Endif
    sString &= sCar
  Loop
  
READ_OBJECT:

  cObject = New Collection
  
  Do
    GoSub READ_CHAR
    If sCar = "}" Then Return
    If sCar <> Chr$(34) Then Error.Raise("String expected")
    GoSub READ_STRING
    sKey = sString
    GoSub READ_CHAR
    If sCar <> ":" Then Error.Raise("Colon expected")
    cObject[sKey] = ReadValue()
    GoSub READ_CHAR
    If sCar = "}" Then Return cObject
    If sCar <> "," Then Error.Raise("Comma expected")
  Loop
  
READ_ARRAY:

  aVariant = New Variant[]
  
  Do
    GoSub READ_CHAR
    If sCar = "]" Then Break
    Dec $iPos
    aVariant.Add(ReadValue())
    GoSub READ_CHAR
    If sCar = "]" Then Break
    If sCar <> "," Then Error.Raise("Comma expected")
  Loop
  
  If aVariant.Count = 0 Then
    aArray = Null
    Return
  Endif
  
  aArray = ConvertArray(aVariant)
  Return
  
READ_NUMBER:

  sNumber = sCar
  
  Do
    GoSub GET_CHAR
    If Not sCar Then Break
    iPos = InStr(".eE-+0123456789", sCar)
    If iPos = 0 Then 
      Dec $iPos
      Break
    Endif
    If iPos <= 3 Then bFloat = True
    sNumber &= sCar
  Loop
  
  If bFloat Then
    Try vNumber = CFloat(sNumber)
  Else
    Try vNumber = CInt(sNumber)
  Endif
  If IsNull(vNumber) Then Error.Raise("Incorrect number")
  Return
  
End

'' Return a value from its settings internal string representation

Static Public Sub FromString(Value As String) As Variant
  
  Dim vVal As Variant
  $sStr = Value
  $iPos = 1
  vVal = ReadValue(True)
  $sStr = ""
  Return vVal
  
End

Private Function Count_Read() As Integer

  Dim cCol As Collection
  Dim iCount As Integer

  For Each cCol In $cSlot
    iCount += cCol.Count
  Next

  Return iCount
  
End
