' Gambas class file

Private $aProc As String[]
Private $aFilter As Integer[]
Private $iCurrent As Integer
Private $iInit As Integer
Private $sClass As String
Private $sFind As String
Private $dFind As Float
Private $hModule As FEditor
Private $bNoFilter As Boolean

Static Public Sub Popup(hModule As FEditor, sClass As String, aProc As String[], iCurrent As Integer, X As Integer, Y As Integer, W As Integer, H As Integer) As Integer
  
  Dim iRet As Integer
  
  FProcedureList.Init(hModule, sClass, aProc, iCurrent, W, H)
  iRet = FProcedureList.ShowPopup(X, Y) - 1
  FProcedureList.Exit
  Return iRet
  
End

Public Sub Init(hModule As FEditor, sClass As String, aProc As String[], iCurrent As Integer, W As Integer, H As Integer)
  
  $hModule = hModule
  $sClass = sClass
  ' Copy it, as it can disappear during the Editor_Change() method
  $aProc = aProc.Copy()
  $iInit = iCurrent
  $iCurrent = iCurrent
  
  panFilter.Visible = $sClass
  sepFilter.Visible = $sClass
  
  FilterProc
  
  Me.Resize(W, Min(H, $aProc.Count * gvwProc.Rows.H + panFilter.H + 3))

  Try gvwProc[$iCurrent, 0].EnsureVisible
  
  $sFind = ""
  $dFind = Timer
  
End

Public Sub Exit()
  
  $hModule = Null
  
End


Public Sub gvwProc_MouseUp()
  
  If $iCurrent < 0 Then
    Me.Close(0)
  Else
    Me.Close($aFilter[$iCurrent] + 1)
  Endif
  
End

Private Sub SetCurrent(iCurrent As Integer, Optional bEnsureVisible As Boolean = True)

  Dim iOld As Integer = $iCurrent
  
  If iCurrent = iOld Then Return

  If iCurrent >= 0 And If $aProc[$aFilter[iCurrent]] = "-" Then Return
  
  $iCurrent = iCurrent
  If iOld >= 0 Then Try gvwProc.Rows[iOld].Refresh
  If iCurrent >= 0 Then 
    gvwProc.Rows[iCurrent].Refresh
    If bEnsureVisible Then gvwProc[iCurrent, 0].EnsureVisible
  Endif

End

Public Sub gvwProc_MouseMove()
  
  SetCurrent(gvwProc.RowAt(Mouse.Y), True)
  
End

Public Sub gvwProc_Scroll()
  
  SetCurrent(gvwProc.RowAt(Mouse.ScreenY - gvwProc.ScreenY), False)
  
End

Private Sub FindProcedure()
  
  Dim iRow As Integer
  Dim N As Integer
  
  iRow = $iCurrent
  If iRow < 0 Then
    Inc iRow
  Else
    iRow = $aFilter[iRow]
  Endif
  
  Do
    
    If LCase($aProc[iRow]) Begins $sFind Then
      SetCurrent(iRow) 'Try gvwProc.Rows[iRow].Selected = True
      Break
    Endif
    
    Inc iRow
    If iRow >= $aProc.Count Then iRow = 0
    
    Inc N
    If N >= $aProc.Count Then Break
    
  Loop
  
End

Public Sub gvwProc_KeyPress()
  
  If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.Space Then
    gvwProc_MouseUp
    Stop Event
  Else If Key.Code = Key.F6 Or If Key.Code = Key.Escape Then
    Me.Close
    Stop Event
  Else If Key.Text Then
    If (Timer - $dFind) >= 1 Then $sFind = ""
    $sFind &= String.LCase(Key.Text)
    $dFind = Timer
    FindProcedure
  Else If Key.Code = Key.Up Then
    If $iCurrent > 0 Then SetCurrent($iCurrent - 1)
    Stop Event
  Else If Key.Code = Key.Down Then
    If $iCurrent < (gvwProc.Rows.Count - 1) Then SetCurrent($iCurrent + 1)
    Stop Event
  Else If Key.Code = Key.Home Then
    SetCurrent(0)
    Stop Event
  Else If Key.Code = Key.End Then
    SetCurrent(gvwProc.Rows.Count - 1)
    Stop Event
  Endif
  
End

Public Sub Form_Activate()
  
  gvwProc.SetFocus
  'Debug gvwProc.ScrollY
  
End

' Public Sub gvwProc_Scroll()
' 
'   Dim iRow As Integer = gvwProc.RowAt(Mouse.ScreenY - gvwProc.ScreenY)
'   
'   Try gvwProc.Rows[iRow].Selected = True
'   Debug gvwProc.ScrollY
' 
' End

Public Sub gvwProc_Draw(X As Integer, Y As Integer, Width As Integer, Height As Integer, Row As Integer, (Column) As Integer)

  Dim hSymbol As CSymbolInfo
  Dim sName As String
  Dim WT As Float
  
  Try sName = $aProc[$aFilter[Row]]
  If Not sName Then Return

  If sName Begins "-" Then 
  
    sName = Mid$(sName, 2)
    
    Paint.Font.Grade = -2
    WT = Paint.TextSize(sName).Width + Desktop.Scale 
    
    Paint.FillRect(X - 2, Y + Height \ 2, Width + 4, 1, Color.Merge(Color.LightForeground, Color.TextBackground))
    Paint.FillRect(X + (Width - WT) / 2, Y, WT, Height, Color.TextBackground)
    
    Paint.Background = Color.LightForeground
    Paint.DrawText(sName, X, Y, Width, Height, Align.Center)
    
    Return
    
  Endif
  
  If Row = $iCurrent Then Paint.FillRect(X, Y, Width, Height, Color.SetAlpha(Color.LightBackground, 192))
  If $aFilter[Row] = $iInit Then Paint.FillRect(X, Y, Width, Height, Color.SetAlpha(Color.LightBackground, 128))
  
  Paint.Background = Color.TextForeground
  Paint.Font.Bold = False
  Paint.Font.Italic = False

  If $sClass Then
    
    Project.Documentation.GetClassSymbols($sClass)
    Try hSymbol = $hModule.Scan[sName]
    If hSymbol And If hSymbol.Kind = "M" Then Paint.Font.Bold = True
  
  Endif
    
  If Left(sName) = "_" Then 
    If CSymbolInfo.SpecialMethods.Exist(sName, gb.IgnoreCase) Then 
      Paint.Background = Color.SelectedBackground
    Endif
  Else If InStr(sName, "_") Then
    'gvwProc.Data.Picture = Picture["img/16/event.png"]
    Paint.Font.Italic = True
  Endif
  
  If hSymbol And If hSymbol.NotPublic Then Paint.Background = Color.Merge(Paint.Background, Color.TextBackground, 0.3)
  
  If $aFilter[Row] = $iInit Then Paint.DrawTextShadow(sName, X + 2, Y, Width - 4, Height, Align.Left)
  Paint.DrawText(sName, X + 2, Y, Width - 4, Height, Align.Left)
  
  ' If Row = $iInit Then
  '   Paint.Rectangle(X + 0.5, Y + 0.5, Width - 1, Height - 1)
  '   Paint.Background = Color.SelectedBackground
  '   Paint.Stroke
  ' Endif

End

Private Sub FilterProc()

  Dim sProc As String
  Dim bShowStatic As Boolean
  Dim bShowPublic As Boolean
  Dim bShowPrivate As Boolean
  Dim bShowEvent As Boolean
  Dim bShowProperty As Boolean
  Dim sGroup As String
  Dim I As Integer
  Dim bShowHidden As Boolean
  Dim sLastGroup As String
  Dim iCurrent As Integer
  
  If $bNoFilter Then Return
  
  If $iCurrent >= 0 Then
    If $aFilter Then
      Try iCurrent = $aFilter[$iCurrent]
      If Error Then iCurrent = -1
    Else
      iCurrent = $iCurrent
    Endif
  Endif
  
  If panFilter.Visible Then
    bShowStatic = btnShowStatic.Value
    bShowPublic = btnShowPublic.Value
    bShowPrivate = btnShowPrivate.Value
    bShowEvent = btnShowEvent.Value
    bShowProperty = btnShowProperty.Value
    bShowHidden = btnShowHidden.Value
  Endif
  
  If bShowStatic Or If bShowPublic Or If bShowPrivate Or If bShowEvent Or If bShowProperty Or If bShowHidden Then
  
    $aFilter = New Integer[]
    sLastGroup = ""
    sGroup = ""
    
    For I = 0 To $aProc.Max
      
      sProc = $aProc[I]
      
      If sProc Begins "-" Then
        sGroup = Mid$(sProc, 2)
        Continue
      Endif
      
      If Not sGroup Then
        $aFilter.Add(I)
        Continue
      Endif
      
      If bShowPublic And If InStr(sGroup, "PUBLIC") = 0 Then
        Continue
      Else If bShowPrivate And If InStr(sGroup, "PRIVATE") = 0 Then   
        Continue
      Else If bShowEvent And If InStr(sGroup, "EVENT") = 0 Then
        Continue
      Else If bShowProperty And If InStr(sGroup, "PROPERTY") = 0 Then 
        Continue
      Else If bShowHidden And If InStr(sGroup, "HIDDEN") = 0 Then 
        Continue
      Endif
      
      If bShowStatic Then
        If InStr(sGroup, "STATIC") = 0 Then Continue
      Else
        If InStr(sGroup, "STATIC") Then Continue
      Endif
      
      If sGroup <> sLastGroup Then
        $aFilter.Add(I - 1)
        sLastGroup = sGroup
      Endif
      
      $aFilter.Add(I)
      
    Next
    
  Else
    
    $aFilter = New Integer[$aProc.Count]
    For I = 0 To $aProc.Max
      $aFilter[I] = I
    Next
    
  Endif

  'N = $H / Desktop.Scale / 4
  
  ' If aProc.Count > N * 2 Then
  '   fSize = 0.8
  ' Else If aProc.Count > N Then
  '   fSize = 0.9
  ' Else
  '   fSize = 1
  ' Endif

  Project.SetNormalFont(gvwProc, 0.9)

  gvwProc.Rows.Count = $aFilter.Count
  gvwProc.Rows.UnselectAll
  gvwProc.Columns.Count = 1
  gvwProc.Refresh
  
  If iCurrent >= 0 Then
    $iCurrent = $aFilter.Find(iCurrent)
  Else
    $iCurrent = -1
  Endif
  
End

Public Sub btnFilter_Click()

  Dim hChild As Control
  Dim hButton As ToolButton
  
  If Last <> btnShowStatic And If Last.Value Then
    For Each hChild In panFilter.Children
      Try hButton = hChild
      If Error Then Continue
      If Not hButton.Toggle Then Continue
      If hChild = btnShowStatic Then Continue
      If hChild <> Last Then hButton.Value = False
    Next
  Endif
  
  FilterProc

End

Public Sub btnShowAll_Click()

  Dim hChild As Control
  Dim hButton As ToolButton
  
  $bNoFilter = True
  
  For Each hChild In panFilter.Children
    Try hButton = hChild
    If Error Then Continue
    If Not hButton.Toggle Then Continue
    hButton.Value = False
  Next
  
  $bNoFilter = False
  FilterProc

End

Public Sub gvwProc_Leave()

  SetCurrent(-1)

End
