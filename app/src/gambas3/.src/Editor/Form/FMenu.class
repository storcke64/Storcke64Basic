' Gambas class file

Static Public OpenEventHandlerFor As String
Static Public EventName As String

Static Private $hForm As FForm
Static Private $aMenu As New CMenu[]
Static Private $iSaveCurrent As Integer
Static Private $iSaveScrollY As Integer

Private $hFamily As CFamily
Private $iLevel As Integer
Private $cName As New Collection
Private $iCurrent As Integer
Private $bFreeze As Boolean
Private $bModified As Boolean
Private $iIconSize As Integer
Private $sImageProp As String
Private $hButtonClick As Button

Static Public Sub Run(hForm As FForm)

  If hForm <> $hForm Then
    $hForm = hForm
    $iSaveCurrent = 0
    $iSaveScrollY = 0
  Endif
  
  OpenEventHandlerFor = ""
  EventName = ""
  FMenu.ShowModal()

End

' Public Sub _new()
'   
'   'Dim hCont As Container
'   Dim hCtrl As Control
'   Dim hLabel As Label
'   
'   ' Hack for having non-translatable labels
'   
'   'For Each hCont In panMenu.Children
'     For Each hCtrl In panMenu.Children
'       Try hLabel = hCtrl
'       If Not Error Then
'         If hLabel.Tag Then
'           hLabel.Text = hLabel.Tag
'           hLabel.Tag = Null
'         Endif
'       Endif
'     Next
'   'Next
'   
' End

Public Sub Form_Open()

  Settings.Read(Me)
  Project.SetSmallFont(tlbMenu)

  Me.Title = $hForm.Name & " - " & ("Menu editor")
  
  $hFamily = $hForm.GetFamily()

  $iIconSize = Stock.GetSize("small")
  
  If Project.Documentation.Classes[$hFamily.MenuClass].Properties.Exist("Image") Then
    $sImageProp = "Image"
  Else
    $sImageProp = "Picture"
  Endif
  
  lblPicture.Text = $sImageProp
  
  dwgShortcut.Padding = Style.FrameWidth
  
  $bFreeze = True
  gvwMenu.UnSelectAll
  $bFreeze = False

  gvwMenu.Rows.Count = 0
  gvwMenu.Columns.Count = 2
  gvwMenu.Columns[0].Expand = True
  gvwMenu.Columns[1].Width = Desktop.Scale * 20
  
  $iCurrent = -1
  LoadShortcut
  LoadAllMenu
  UpdatePaste
  
  gvwMenu.SetFocus
  
  Me.Center
  
End

Public Sub Form_Close()
  
  If $bModified Then
    Select Case Message.Warning(("Menus have been modified!"), ("Save"), ("Ignore"), ("Cancel"))
      Case 1
        If CheckMenu() Then 
          Stop Event
          Return
        Endif
        SaveAllMenu
      Case 2
      Case 3
        Stop Event
        Return
    End Select
  Endif
  
  $iSaveCurrent = $iCurrent
  $iSaveScrollY = gvwMenu.ScrollY
  Settings.Write(Me)
  
End



Public Sub btnCancel_Click()

  'WriteMenu
  Me.Close

End


Public Sub btnOK_Click()

  If WriteMenu() Then Return
  If CheckMenu() Then Return
  SaveAllMenu
  Me.Close

End


Private Sub CreateMenu(hCCtrl As CControl)

  Dim hCMenu As CMenu
  Dim hMenu As Menu
  
  hCMenu = New CMenu
  
  With hCMenu
  
    .Name = hCCtrl.Name
    .Caption = hCCtrl.GetPropertyDefault("Text")
    .Action = hCCtrl.GetPropertyDefault("Action")
    .Level = $iLevel
    .Enabled = hCCtrl.GetPropertyDefault("Enabled")
    .Visible = hCCtrl.GetPropertyDefault("Visible")
    .Checked = hCCtrl.GetPropertyDefault("Checked")
    .Toggle = hCCtrl.GetPropertyDefault("Toggle")
    .Radio = hCCtrl.GetPropertyDefault("Radio")
    .SetShortcut(hCCtrl.GetPropertyDefault("Shortcut"))
    .Picture = hCCtrl.GetPropertyDefault($sImageProp)
    .Tag = hCCtrl.GetPropertyDefault("Tag")
    .Group = hCCtrl.GetPropertyDefault(CPropertyInfo.EVENT_NAME)
    .Translate = hCCtrl.GetPropertyDefault(CPropertyInfo.TRANSLATE_NAME)
    
  End With

  $aMenu.Add(hCMenu)
  $cName[hCMenu.Name] = True

  $iLevel = $iLevel + 1
  
  For Each hMenu In hCCtrl.Control.Children
    CreateMenu($hForm.Control[hMenu.Tag])
  Next

  $iLevel = $iLevel - 1

End


' Private Sub DrawMenu(iInd As Integer)
' 
'   Dim sElt As String
'   
'   $bFreeze = True
' 
'   With $aMenu[iInd]
' 
'     sElt = String$(.Level, "···") & .Caption
'     If .Shortcut Then
'       sElt = sElt & " (" & .GetShortcut() & ")"
'     Endif
'     lstMenu[iInd].Text = sElt
' 
'   End With
'   
'   $bFreeze = False
' 
' End


Private Sub LoadAllMenu()

  Dim hCtrl As CControl

  $bFreeze = True

  $aMenu.Clear
  $cName.Clear

  For Each hCtrl In $hForm.AllMenus
    'IF hCtrl.Parent.Kind = "Form" THEN
    CreateMenu(hCtrl)
    'ENDIF
  Next

  ' lstMenu.Clear
  ' 
  ' For iInd = 0 To $aMenu.Count - 1
  '   lstMenu.Add("")
  '   DrawMenu(iInd)
  ' Next  
  ' 
  ' lstMenu.Add("")
  ' 
  ' lstMenu.Index = 0
  
  '$aMenu.Add(Null)
  gvwMenu.Rows.Count = $aMenu.Count
  gvwMenu.Rows.Height = gvwMenu.Font.Height * 1.2
  
  $bFreeze = False
  $bModified = False

  SetCurrent($iSaveCurrent)
  gvwMenu.ScrollY = $iSaveScrollY

End


Private Sub SaveAllMenu()

  Dim hCtrl As CControl
  Dim hCMenu As CMenu
  Dim hParent As CControl
  Dim iLevel As Integer

  $hForm.GetUndo().Begin

  For Each hCtrl In $hForm.AllMenus
    $hForm.RemoveControl(hCtrl.Name)
  Next
  
  $hForm.GetUndo().Add("RestoreMenus")
  $hForm.AllMenus.Clear

  hCtrl = $hForm.Control[$hForm.Name]
  iLevel = -1

  For Each hCMenu In $aMenu
  
    If Not hCMenu Then Continue
    
    With hCMenu
  
      If .Level > iLevel Then
      
        hParent = hCtrl
        iLevel = .Level
        
      Else
      
        While .Level < iLevel
          hParent = hParent.Parent
          iLevel = iLevel - 1
        Wend
      
      Endif
      
      hCtrl = $hForm.CreateControl($hFamily.MenuClass, hParent, .Name)
      
      hCtrl.SetProperty("Text", .Caption)
      hCtrl.SetProperty("Action", .Action)
      hCtrl.SetProperty("Visible", .Visible)
      hCtrl.SetProperty("Enabled", .Enabled)
      hCtrl.SetProperty("Checked", .Checked)
      hCtrl.SetProperty("Toggle", .Toggle)
      hCtrl.SetProperty("Radio", .Radio)
      hCtrl.SetProperty("Shortcut", .GetShortcut())
      hCtrl.SetProperty($sImageProp, .Picture)
      hCtrl.SetProperty("Tag", .Tag)
      hCtrl.SetProperty(CPropertyInfo.EVENT_NAME, .Group)
      hCtrl.SetProperty(CPropertyInfo.TRANSLATE_NAME, .Translate)
    
    End With
  
  Next
  
  $hForm.UpdateBorder
  
  $hForm.GetUndo().End

  $bModified = False

End



Public Sub gvwMenu_Change()

  If $bFreeze Then Return
  If gvwMenu.Row < 0 Then Return
  If SetCurrent(gvwMenu.Row) Then Stop Event

End

Private Sub ShowWarning(sMsg As String, hCtrl As Control)

  lblMessage.Text = sMsg
  panMessage.Show
  hCtrl.SetFocus

End

Private Sub WriteMenu() As Boolean

  Dim iInd As Integer
  Dim sName As String
  Dim sComp As String

  'IF NOT ME.Visible THEN
  '  PRINT "WriteMenu ??"
  '  RETURN
  'ENDIF

  If $bFreeze Then Return True
  
  iInd = $iCurrent

  If iInd < 0 Or iInd > $aMenu.Max Then Return 
  
  panMessage.Hide

  With $aMenu[iInd]
    
    sComp = .ToString()

    sName = Trim(txtName.Text)

    If Not sName Then
      ShowWarning(("Please enter a menu name."), txtName)
      Return True
    Endif

    If CControl.CheckName(sName) Then
      ShowWarning(("Bad menu name !"), txtName)
      Return True
    Endif

    If CControl.CheckName(cmbGroup.Text) Then
      ShowWarning(("Bad group name !"), cmbGroup)
      Return True
    Endif

    If sName <> .Name Then
      If Not $cName.Exist(sName) Then
        $cName[.Name] = Null
        $cName[sName] = True
        .Name = sName
      Endif
    Endif

    .Caption = Trim(txtCaption.Text)
    .Action = Trim(txtAction.Text)
    .Group = Trim(cmbGroup.Text)
    .Visible = chkVisible.Value
    .Enabled = chkEnabled.Value
    .Checked = chkChecked.Value
    .Toggle = chkToggle.Value
    .Radio = chkRadio.Value
    .Translate = chkTranslate.Value
    .Ctrl = chkCtrl.Value
    .Shift = chkShift.Value
    .Alt = chkAlt.Value
    If cmbShortcut.Index = 0 Then
      .Shortcut = ""
    Else
      .Shortcut = cmbShortcut.Text
    Endif
    .Picture = txtPicture.Text
    .Tag = txtTag.Text
    
    If .ToString() <> sComp Then SetModified
  
  End With
  
  gvwMenu.Rows[$iCurrent].Refresh
  
End


Private Sub ReadMenu()

  Dim iInd As Integer
  
  $bFreeze = True
  
  iInd = $iCurrent

  If iInd >= 0 And iInd <= $aMenu.Max Then
  
    With $aMenu[iInd]
    
      txtName.Text = .Name
      txtCaption.Text = .Caption
      txtAction.Text = .Action
      cmbGroup.Text = .Group
      chkVisible.Value = .Visible
      chkEnabled.Value = .Enabled
      chkChecked.Value = .Checked
      chkToggle.Value = .Toggle
      chkRadio.Value = .Radio
      chkTranslate.Value = .Translate
      chkCtrl.Value = .Ctrl
      chkShift.Value = .Shift
      chkAlt.Value = .Alt
      If Len(.ShortCut) Then
        cmbShortcut.Text = .Shortcut
      Else
        cmbShortCut.Index = 0
      Endif
      txtPicture.Text = .Picture
      txtTag.Text = .Tag
      SetPicture(.Picture)
    
    End With

    panMenu.Show
    lblCreate.Hide

  Else

    panMenu.Hide
    lblCreate.Show

  Endif

  $bFreeze = False

End


Private Sub DeleteMenu(iInd As Integer)

  $cName.Remove($aMenu[iInd].Name)
  $aMenu.Remove(iInd)
  gvwMenu.Rows.Remove(iInd)
  SetModified

End


Public Sub btnDelete_Click()

  Dim iInd As Integer
  Dim aDelete As New Integer[]

  'IF WriteMenu() THEN RETURN

  $bFreeze = True
  
  For iInd = 0 To $aMenu.Max
    If gvwMenu.Rows[iInd].Selected Then aDelete.Add(iInd)
  Next

  For iInd = aDelete.Max DownTo 0
    DeleteMenu(aDelete[iInd])
    If aDelete[iInd] < $iCurrent Then Dec $iCurrent
  Next

  $iCurrent = Min($iCurrent, $aMenu.Max)
  
  gvwMenu.Rows.Count = $aMenu.Count
  gvwMenu.Refresh
  gvwMenu.UnSelectAll
  
  $bFreeze = False
  
  SetCurrent($iCurrent)

End

Private Sub InsertMenuAt(iIndex As Integer, sName As String, iLevel As Integer) As CMenu

  Dim hCMenu As CMenu
  
  hCMenu = New CMenu
  If $cName.Exist(sName) Then sName = GetName()
  hCMenu.Name = sName
  hCMenu.Translate = True
  hCMenu.Level = iLevel
  $cName[sName] = True

  $aMenu.Add(hCMenu, iIndex)
  SetModified
  Inc gvwMenu.Rows.Count
  gvwMenu.Refresh
  
  Return hCMenu
  
End


Private Sub InsertMenu(bAfter As Boolean, Optional bSeparator As Boolean)

  Dim hCMenu As CMenu
  Dim iIndex As Integer
  Dim iLevel As Integer

  If WriteMenu() Then Return

  iIndex = $iCurrent
  If iIndex < 0 Then iIndex = $aMenu.Max
  
  If bAfter Then Inc iIndex

  If bAfter Then
    If iIndex > 0 Then iLevel = $aMenu[iIndex - 1].Level
  Else
    If iIndex >= 0 Then iLevel = $aMenu[iIndex].Level
  Endif
  
  If bSeparator And If iLevel < 1 Then iLevel = 1
  
  $bFreeze = True

  hCMenu = InsertMenuAt(iIndex, GetName(), iLevel)
  If Not bSeparator Then hCMenu.Caption = hCMenu.Name

  gvwMenu.UnSelectAll
  $bFreeze = False

  SetCurrent(iIndex)

  txtName.SelectAll
  txtName.SetFocus

End

Public Sub btnInsert_Click()

  InsertMenu(True)

End


Private Function GetName() As String

  Dim iCpt As Integer
  Dim sName As String

  Do

    Inc iCpt
    sName = $hFamily.MenuClass & CStr(iCpt)
    If Not $cName.Exist(sName) Then Return sName

  Loop

End


Public Sub btnRight_Click()

  Dim iInd As Integer

  If WriteMenu() Then Return

  For iInd = 0 To $aMenu.Count - 1

    If gvwMenu.Rows[iInd].Selected Then
      With $aMenu[iInd]
        .Level = .Level + 1
        gvwMenu.Rows[iInd].Refresh
        SetModified
      End With
    Endif

  Next

  ReadMenu

End


Public Sub btnLeft_Click()

  Dim iInd As Integer

  If WriteMenu() Then Return

  For iInd = 0 To $aMenu.Count - 1

    If gvwMenu.Rows[iInd].Selected Then
      With $aMenu[iInd]
        .Level = Max(.Level - 1, 0)
        gvwMenu.Rows[iInd].Refresh
        SetModified
      End With
    Endif
  
  Next
  
  ReadMenu

End


Private Sub LoadShortcut()

  Dim iInd As Integer
  Dim aShortcut As String[]
  Dim sCar As String

  If cmbShortcut.Count Then Return

  aShortcut = ["(None)"]

  For iInd = Asc("A") To Asc("Z")
    aShortcut.Add(Chr$(iInd))
  Next

  For iInd = Asc("0") To Asc("9")
    aShortcut.Add(Chr$(iInd))
  Next

  For iInd = 33 To 126
    sCar = Chr$(iInd)
    If IsDigit(sCar) Or If IsLetter(sCar) Then Continue
    aShortcut.Add(sCar)
  Next

  'aShortcut.Insert(["+", "-", "*", "/", "(", ")", "[", "]", "{", "}", "@", "=", ".", "!", "\\", "%", "#", "$", "~"].Sort())

  aShortcut.Insert(["Backspace", "Del", "Down", "End", "Enter", "Esc", "Home", "Ins", "Left", "Pause", "PgDown", "PgUp", "Return", "Space", "Right", "Up"])

  For iInd = 1 To 12
    aShortcut.Add("F" & CStr(iInd))
  Next
  
  cmbShortcut.List = aShortcut
  
End



Private Function CheckMenu() As Boolean

  Dim iInd As Integer
  Dim iLastLevel As Integer

  iLastLevel = -1

  For iInd = 0 To $aMenu.Max - 1

    If $aMenu[iInd].Level - iLastLevel > 1 Then
      gvwMenu.Rows.UnselectAll
      gvwMenu.Row = iInd
      Message.Warning(("This menu is too deep !"))
      Return True
    Endif
    
    iLastLevel = $aMenu[iInd].Level
  
  Next

End


Public Sub cmbShortcut_Click()
  WriteMenu
  If cmbShortcut.Index = 0 Then
    ApplyToSelection("Shortcut", "")
  Else
    ApplyToSelection("Shortcut", cmbShortcut.Text)
  Endif
End

Public Sub chkCtrl_Click()
  WriteMenu
  ApplyToSelection("Ctrl", chkCtrl.Value)
End

Public Sub chkAlt_Click()
  WriteMenu
  ApplyToSelection("Alt", chkCtrl.Value)
End

Public Sub chkShift_Click()
  WriteMenu
  ApplyToSelection("Shift", chkCtrl.Value)
End

Public Sub txtCaption_Change()
  WriteMenu
  ApplyToSelection("Caption", Trim(txtCaption.Text))
End


Public Sub btnInsertBefore_Click()

  InsertMenu(False)

End

Private Sub SetSelected(aSel As Integer[])

  Dim iSel As Integer
  
  gvwMenu.Rows.UnselectAll
  For Each iSel In aSel
    gvwMenu.Rows[iSel].Selected = True
  Next

End


Public Sub btnUp_Click()

  Dim iInd As Integer
  Dim iCount As Integer
  Dim aSel As New Integer[]

  iCount = $aMenu.Count
  If iCount <= 1 Then Return

  'If $iCurrent = $aMenu.Max Then Return
  If gvwMenu.Rows[0].Selected Then Return
  
  For iInd = 1 To $aMenu.Count - 1

    If gvwMenu.Rows[iInd].Selected Then
      aSel.Add(iInd - 1)
      Swap $aMenu[iInd], $aMenu[iInd - 1]
      SetModified
    End If

  Next

  Dec $iCurrent
  SetCurrent($iCurrent)
  SetSelected(aSel)
  gvwMenu.Refresh

  'ReadMenu

End


Public Sub btnDown_Click()

  Dim iInd As Integer
  Dim iCount As Integer
  Dim aSel As New Integer[]

  iCount = $aMenu.Count
  If iCount <= 1 Then Return

  If $iCurrent = $aMenu.Max Then Return

  If gvwMenu.Rows[iCount - 1].Selected Then Return

  For iInd = iCount - 1 DownTo 0

    If gvwMenu.Rows[iInd].Selected Then

      aSel.Add(iInd + 1)
      Swap $aMenu[iInd], $aMenu[iInd + 1]
      SetModified

    End If

  Next

  Inc $iCurrent
  SetCurrent($iCurrent)
  SetSelected(aSel)
  gvwMenu.Refresh

  'ReadMenu

End

Private Sub UpdateEvent()

  Dim cSymbol As Collection
  Dim sName As String
  Dim hCMenu As CMenu
  Dim sGroup As String
  Dim hSymbol As CSymbolInfo
  Dim hButton As Button
  Dim hPict As PictureBox

  panEvent.Children.Clear
  
  If $iCurrent < 0 Then Return
  hCMenu = $aMenu[$iCurrent]
  
  If Not hCMenu.Caption Then Return

  cSymbol = Project.Documentation.GetClassSymbols($hForm.Name)
  If Not cSymbol Then Return
  
  sGroup = hCMenu.Group
  If Not sGroup Then sGroup = hCMenu.Name

  hPict = New PictureBox(panEvent)
  hPict.Resize(panEvent.H, panEvent.H)
  hPict.Image = Image.Load("img/symbol/event.png")
  hPict.Stretch = True
  
  $hButtonClick = Null
  
  For Each sName In Project.Documentation.Classes[$hFamily.MenuClass].Events

    hSymbol = cSymbol[sGroup & "_" & sName]
    
    'If $bReadOnly Then
    '  If Not hSymbol Or If hSymbol.Kind <> "m" Then Continue
    'Endif
    
    hButton = New Button(panEvent) As "btnEvent"
    hButton.Text = sName
    hButton.AutoResize = True
    
    If sName == "Click" Then $hButtonClick = hButton

    If hSymbol And If hSymbol.Kind = "m" Then hButton.Picture = Picture["icon:/small/ok"]

  Next

  If panEvent.Children.Count = 0 Then Return

End

Private Sub SetCurrent(iCurrent As Integer) As Boolean

  If iCurrent <> $iCurrent Then 
    If WriteMenu() Then Return True
  Endif
  
  gvwMenu.Rows.UnselectAll
  If iCurrent < 0 Or iCurrent >= $aMenu.Count Then 
    $iCurrent = -1
  Else
    Object.Lock(gvwMenu)
    gvwMenu.Rows[$iCurrent].Selected = False
    $iCurrent = iCurrent
    If gvwMenu.Row <> $iCurrent Then gvwMenu.Row = $iCurrent
    gvwMenu.Rows[$iCurrent].Selected = True
    gvwMenu[$iCurrent, 0].EnsureVisible
    Object.Unlock(gvwMenu)
  Endif
  
  ReadMenu
  UpdateEvent

End

Private Sub ApplyToSelection(sProp As String, vValue As Variant)

  Dim aSel As Integer[]
  Dim iInd As Integer
  Dim sComp As String
  
  aSel = gvwMenu.Rows.Selection
  If aSel.Count < 2 Then Return
  
  For Each iInd In aSel
    
    If iInd = $iCurrent Then Continue
    
    sComp = $aMenu[iInd].ToString()
    Object.SetProperty($aMenu[iInd], sProp, vValue)
    If sComp <> $aMenu[iInd].ToString() Then
      SetModified
      gvwMenu.Rows[iInd].Refresh
    Endif
    
  Next
  
End


Private Sub SetPicture(sPict As String)
  
  txtPicture.Text = sPict
  
Catch

  Message.Error(Error.Text)
  
End

Public Sub btnSave_Click()

  WriteMenu

End

' Public Sub lstMenu_MouseDown()
' 
'   Dim iInd As Integer
'   
'   If Not (Mouse.Control Or Mouse.Shift) Then
'     For iInd = 0 To $aMenu.Max
'       gvwMenu[iInd].Selected = False
'     Next
'   Endif
' 
' End

Public Sub btnShortcut_Click()

  chkCtrl.Value = False
  chkShift.Value = False
  chkAlt.Value = False
  cmbShortcut.Index = 0

End

' Public Sub panIcon_Arrange()
' 
'   btnIcon.H = btnIcon.W
' 
' End

Private Sub GetMenu(hMenu As CMenu) As String
  
  With hMenu
    
    Return .Name & "," & .Level & "," & Quote(.Caption) & "," & .Action & "," & .Group & "," & .Visible & "," & .Enabled & "," & .Checked & "," & .Toggle & "," & .Radio & "," & .Translate & "," &
      .Ctrl & "," & .Shift & "," & .Alt & "," & Quote(.Shortcut) & "," & Quote(.Picture) & "," & Quote(.Tag)
    
  End With

End


Public Sub btnCopy_Click()

  Dim iInd As Integer
  Dim sData As String
  
  For iInd = 0 To $aMenu.Count - 1
    If gvwMenu.Rows[iInd].Selected Then
      sData &= GetMenu($aMenu[iInd]) & "\n"
    Endif
  Next
  
  If Not sData Then Return
  
  Clipboard.Copy(sData, MMime.MENU)
  UpdatePaste

End

Public Sub btnCut_Click()

  btnCopy_Click
  btnDelete_Click

End

Private Sub UpdatePaste()
  
  btnPaste.Enabled = Clipboard.Formats.Exist(MMime.MENU)
  btnPasteBefore.Enabled = btnPaste.Enabled
  
End

Public Sub btnPasteBefore_Click()

  Dim sData As String
  Dim aMenu As String[]
  Dim iStart As Integer
  Dim iLength As Integer
  Dim hCMenu As CMenu
  
  sData = Trim(Clipboard.Paste(MMime.MENU))
  If Not sData Then Return
  
  gvwMenu.Rows.UnselectAll
  
  iStart = $iCurrent
  If iStart < 0 Then iStart = 0
  
  For Each sData In Split(sData, "\n")
    aMenu = Split(sData, ",", Chr$(34))
    hCMenu = InsertMenuAt(iStart + iLength, aMenu[0], CInt(aMenu[1]))
    With hCMenu
      .Caption = aMenu[2]
      .Action = aMenu[3]
      .Group = aMenu[4]
      .Visible = CBool(aMenu[5])
      .Enabled = CBool(aMenu[6])
      .Checked = CBool(aMenu[7])
      .Toggle = CBool(aMenu[8])
      .Radio = CBool(aMenu[9])
      .Translate = CBool(aMenu[10])
      .Ctrl = CBool(aMenu[11])
      .Shift = CBool(aMenu[12])
      .Alt = CBool(aMenu[13])
      .Shortcut = aMenu[14]
      .Picture = aMenu[15]
      .Tag = aMenu[16]
    End With
    Inc iLength
  Next
  
  SetCurrent(iStart)
  gvwMenu.Select(iStart, iLength)

End

Public Sub btnPaste_Click()
  
  Inc $iCurrent
  btnPasteBefore_Click
  
End

Public Sub txtSearch_Click()

  Dim iIndex, iStart As Integer
  Dim sFind As String = txtSearch.Text
  
  If Not sFind Then Return
  
  iStart = gvwMenu.Row 
  If iStart < 0 Then iStart = 0
  
  sFind = String.LCase(sFind)
  
  iIndex = iStart
  Do
    Inc iIndex
    If iIndex >= $aMenu.Max Then iIndex = 0
    If iIndex = iStart Then Break
    With $aMenu[iIndex]
      If InStr(String.LCase(.Caption), sFind) Or If InStr(LCase(.Name), sFind) Then 
        SetCurrent(iIndex)
        Break
      Endif
    End With
  Loop

End

Public Sub txtSearch_Activate()

  txtSearch_Click

End

Private Sub GetMenuColor(hMenu As CMenu) As Integer

  If Not hMenu.Visible Then 
    Return Color.Merge(Color.TextForeground, Color.TextBackground, 0.8)
  Else If Not hMenu.Enabled Then
    Return Color.Merge(Color.TextForeground, Color.TextBackground, 0.5)
  Else
    Return Color.TextForeground
  Endif

End

Public Sub gvwMenu_Draw(X As Integer, Y As Integer, Width As Integer, Height As Integer, Row As Integer, Column As Integer)

  Dim D As Integer
  Dim iCol As Integer
  Dim sText As String
  Dim hPict As Picture

  With $aMenu[Row]
    
    If .Level = 0 And If Row > 0 Then
      Paint.FillRect(X, Y, Width, 1, Color.LightForeground)
      ' Paint.Dash = [1]
      ' Paint.MoveTo(X, Y)
      ' Paint.RelLineTo(Width, 0)
      ' Paint.Background = Color.TextForeground
      ' Paint.Stroke
      ' Paint.Dash = Null
    Endif
    
    If Column <> 0 Then 
      
      If Not .Caption And If .Level Then
        GoSub PAINT_DASH
      Endif
      
      Return
      
    Endif

    iCol = GetMenuColor($aMenu[Row])
    
    D = .Level * Desktop.Scale * 4 + Desktop.Scale
    If .Level Then D += Desktop.Scale
    X += D
    Width -= D
  
    If .Picture And If .Level Then
      Try hPict = $hFamily.GetPicture(.Picture)
      If hPict Then hPict = hPict.Image.Stretch($iIconSize, $iIconSize).Picture
      If hPict Then Paint.DrawPicture(hPict, X - $iIconSize - Desktop.Scale / 2, Y + (Height - $iIconSize) / 2)
    Endif
      
    If .Level = 0 Then
      Paint.Font.Bold = True
      Paint.Font.Underline = True
    Endif
  
    If .Caption Then
      
      sText = .Caption
      
    Else If .Level Then
      
      sText = "  " & .Name & "  "
      
      If Width > Desktop.Scale * 2 Then
        GoSub PAINT_DASH
      Endif
      
      X += D
      Width -= D
      Paint.Font.Italic = True
      Paint.FillRect(X, Y + Height / 2, Paint.TextSize(sText).Width, 1, If(Row = gvwMenu.Row, Color.LightBackground, Color.TextBackground))
      
    Else
      
      sText = .Name
      
    Endif
    
    Paint.Background = iCol
    Paint.DrawText(sText, X, Y, Width, Height, Align.Normal)
    
  End With
  
  Return
  
PAINT_DASH:

  Paint.Dash = [1]
  Paint.MoveTo(X, CInt(Y + Height / 2) + 0.5)
  If Column = 1 Then
    Paint.RelLineTo(Width - Desktop.Scale * 2, 0)
  Else
    Paint.RelLineTo(Width, 0)
  Endif
  Paint.Background = Color.LightForeground
  Paint.LineWidth = 1
  Paint.Stroke
  Paint.Dash = Null
  Return

End

Public Sub gvwMenu_Data(Row As Integer, Column As Integer)

  
  With $aMenu[Row]
  
    Select Case Column
      
      Case 1
        gvwMenu.Data.Text = .GetShortcut()
      
    End Select
    
    gvwMenu.Data.Foreground = GetMenuColor($aMenu[Row])
    
    If Row = gvwMenu.Row Then gvwMenu.Data.Background = Color.LightBackground
  
    If .Level = 0 Then
      gvwMenu.Data.Font.Bold = True
      gvwMenu.Data.Font.Underline = True
    Endif
    
  End With

End

Private Sub SetModified()

  If Not $bModified Then
    Me.Title = Me.Title & " [" & ("modified") & "]"
    $bModified = True
  Endif

End

Public Sub chkVisible_Click()

  If WriteMenu() Then Return
  ApplyToSelection("Visible", chkVisible.Value)

End

Public Sub chkEnabled_Click()

  If WriteMenu() Then Return
  ApplyToSelection("Enabled", chkEnabled.Value)

End

Public Sub chkToggle_Click()

  If WriteMenu() Then Return
  ApplyToSelection("Toggle", chkToggle.Value)

End

Public Sub chkRadio_Click()

  If WriteMenu() Then Return
  ApplyToSelection("Radio", chkRadio.Value)

End

Public Sub chkChecked_Click()

  If WriteMenu() Then Return
  ApplyToSelection("Checked", chkChecked.Value)

End

' Public Sub Form_KeyPress()
' 
'   If Key.Code = Key.Up Then
'     Try Dec gvwMenu.Row
'   Else If Key.Code = Key.Down Then
'     Try Inc gvwMenu.Row
'   Else If Key.Code = Key.Home And If Key.Control Then
'     gvwMenu.Row = 0
'   Else If Key.Code = Key.End And If Key.Control Then
'     gvwMenu.Row = $aMenu.Max
'   Endif
' 
' End

Public Sub btnInsertSeparator_Click()

  InsertMenu(True, True)

End

Public Sub gvwMenu_Activate()
  
  $hButtonClick.Value = True
  
End

Public Sub btnEvent_Click()
  
  If WriteMenu() Then Return
  EventName = Last.Text
  Try OpenEventHandlerFor = $aMenu[$iCurrent].Name
  If Not Error Then
    Me.Close()
    If Not Me.Closed Then OpenEventHandlerFor = ""
  Endif
  
End

Public Sub chkTranslate_Click()

  If WriteMenu() Then Return
  ApplyToSelection("Translate", chkTranslate.Value)

End

Public Sub txtAction_Change()

  If WriteMenu() Then Return
  ApplyToSelection("Action", Trim(txtAction.Text))

End

Public Sub txtPicture_Change()

  If WriteMenu() Then Return
  ApplyToSelection("Picture", txtPicture.Text)

End

Public Sub txtTag_Change()

  If WriteMenu() Then Return
  ApplyToSelection("Tag", txtTag.Text)

End

Public Sub cmbGroup_Change()

  If WriteMenu() Then Return
  ApplyToSelection("Group", Trim(cmbGroup.Text))

End

Public Sub txtPicture_Click()

  Dim sPict As String

  sPict = $hFamily.SelectImage("Image", txtPicture.Text)
  If sPict Then txtPicture.Text = sPict
  
End


Public Sub dwgShortcut_Draw()

  Style.PaintBox(0, 0, Paint.W, Paint.H)

End

Private Sub GetGroupList() As String[]

  Dim aGroup As New String[]
  Dim sGroup As String
  Dim hMenu As CMenu

  For Each hMenu In $aMenu
    sGroup = hMenu.Group
    If Not sGroup Then Continue
    If aGroup.ExistSorted(sGroup) Then Continue 
    aGroup.Add(sGroup)
    aGroup.Sort()
  Next
  
  aGroup.Add("", 0)
  Return aGroup
  
End

Public Sub cmbGroup_GotFocus()

  cmbGroup.List = GetGroupList()

End
