' Gambas class file

Private Const WIDTH As Integer = 40

Private $cToolBar As New Collection
Private $cToolBarFromIndex As New Collection
Private $sToolBar As String
Private $sLastToolBar As String
Private $sFamily As String

Private $sLastLib As String
Private $iSize As Integer
'PRIVATE $bAnimate AS Boolean

Private $aOrder As New String[]

Private $iTabDeprecated As Integer

Public Sub Form_Open()

  Dim aTrans As String[]
  
  $aOrder = ["Form", "WebForm", "TermForm", "Report", "View", "Dialog", "Chooser", "Container", "Data", "Network", "Special"]

  ' Just for the translations
  aTrans = [("Form"), ("WebForm"), ("TermForm"), ("View"), ("Report"), ("Dialog"), ("Chooser"), ("Container"), ("Data"), ("Network"), ("Special"), ("Deprecated")]

  ReadConfig
  SetTool
  'MoveToolBar

End


Private Function AddToolBar(sToolBar As String, sType As String) As FToolPanel

  Dim hToolBar As FToolPanel

  If Not $cToolBar.Exist(sToolBar) Then

    If $cToolBar.Count Then Inc tabTool.Count
    
    tabTool.Index = tabTool.Count - 1

    If sToolBar = "Deprecated" Then $iTabDeprecated = tabTool.Index
    
    tabTool.Text = Tr(sToolBar)
    
    hToolBar = New FToolPanel(sToolBar, sType, tabTool) As "ToolBar"
    hToolBar.Tag = sToolBar
    $cToolBar[sToolBar] = hToolBar
    $cToolBarFromIndex[tabTool.Index] = hToolBar

    If Not $sToolbar Then $sToolbar = sToolBar
    
  Endif

  Return $cToolBar[sToolBar]

End


Public Sub RefreshToolbar(Optional bForce As Boolean)

  Dim hToolBar As FToolPanel
  Dim sLib As String
  Dim sCtrl As String
  Dim sNewLib As String
  Dim hComp As CComponent
  Dim hClass As CClassInfo
  Dim sGroup As String
  Dim aToolBar As New String[]
  Dim cToolBar As New Collection
  Dim iOrder As Integer
  Dim iLast As Integer
  Dim bExist As Boolean
  Dim sOldTab As String
  Dim cHidden As Collection
  
  'Dim sType As String

  If Project.Components Then

    For Each sLib In Project.Components
      sNewLib = sNewLib & sLib & " "
    Next
    sNewLib = Trim(sNewLib)

  Endif

  If Not bForce Then
    If $sLastLib Then
      If sNewLib = $sLastLib Then Return
    Endif
  Endif

  tabTool.Hide
  
  sOldTab = tabTool.Text

  For Each hToolBar In $cToolBar
    hToolBar.Hide
    hToolBar.Reparent(Me)
    hToolBar.Delete
  Next
  
  $cToolBar.Clear
  $cToolBarFromIndex.Clear
  'Debug tabTool.Index
  tabTool.Count = 1
  'Debug "->";; tabTool.Index

  $sToolBar = ""
  $sFamily = ""

  'AddTool(SELECT_TOOL)
  'SetTool()

  If Project.Components Then

    ' Get all toolbars
    
    cHidden = New Collection

    For Each hComp In Project.Documentation.Components

      With hComp

        If Not hComp.UsedByProject() Then Continue

        For Each sCtrl In .Hiddens
          cHidden[sCtrl] = True
        Next

        For Each sCtrl In .Controls
          sGroup = Project.Documentation.Classes[sCtrl].Group
          cToolBar[sGroup] = sGroup
        Next

      End With

    Next
    
    iLast = $aOrder.Count
    For Each sGroup In cToolBar
      iOrder = $aOrder.Find(sGroup)
      If iOrder < 0 Then
        iOrder = iLast
        Inc iLast
      Endif
      aToolBar.Add(Format(iOrder, "00") & sGroup)
    Next
    
    aToolBar.Sort
    
    $iTabDeprecated = 0
    For Each sGroup In aToolBar
      AddToolBar(Mid$(sGroup, 3), "Not yet implemented")
    Next
    
    btnDeprecated.Value = Project.ShowDeprecated
    btnDeprecated_Click
    
    For Each hComp In Project.Documentation.Components

      With hComp

        If Not hComp.UsedByProject() Then Continue

        For Each sCtrl In .Controls
          If cHidden.Exist(sCtrl) Then Continue
          hClass = Project.Documentation.Classes[sCtrl]
          sGroup = hClass.Group
          bExist = False
          For Each hToolBar In $cToolBar
            If hToolBar.Exist(sCtrl) Then 
              bExist = True
              Break
            Endif
          Next
          If Not bExist Then 
            If $cToolBar[sGroup] Then 
              $cToolBar[sGroup].Add(sCtrl, hComp.Key, hClass.Family)
            Else
              Error "gambas3: warning: unknown group '"; sGroup; "' for control '"; sCtrl; "'"
            Endif
          Endif
        Next

      End With

    Next
    
    For Each hToolBar In $cToolBar
      hToolBar.Sort()
    Next

    'Try SelectToolbar($sToolBar)
    'tabTool.Index = 0
    'IF ERROR THEN MoveToolbar

  Endif

  tabTool.Index = 0
  
  ' For iInd = 0 To tabTool.Count - 1
  '   If tabTool[iInd].Text = sOldTab Then 
  '     tabTool.Index = iInd
  '     Break 
  '   Endif
  ' Next
  
  OnProjectActivate
  
  tabTool.Show

  $sLastLib = sNewLib

End

Private Sub ClearToolBar()

  $sLastLib = ""
  RefreshToolBar

End

Public Function GetTool() As String

  If Not $sToolBar Then Return
  Return $cToolBar[$sToolBar].GetTool()

End

Public Sub SetTool()

  If Not $sToolBar Then Return
  $cToolBar[$sToolBar].SetTool()

End

Public Sub GetSize() As Integer
  
  Return 24 + Settings["/Toolbox/Size", 0] * 8
  
End

Private Sub UpdateSize()
  
  Dim iSize As Integer = GetSize()
  Dim iTab As Integer
  
  If iSize <> $iSize Then
    iTab = tabTool.Index
    $iSize = iSize
    ClearToolBar
    tabTool.Index = iTab
  Endif
  
End

Public Sub ReadConfig()

  Dim hFont As Font

  hFont = Project.GetSmallFont()
  tabTool.TextFont = hFont
  panTooltip.Font = hFont
  'panTooltip.Height = hFont.H + 4
  UpdateSize

End

Public Sub tabTool_Click()

  Dim hToolbar As FToolPanel

  hToolbar = $cToolBarFromIndex[tabTool.Index]
  If Not hToolBar Then Return
  
  $sLastToolBar = $sToolBar
  $sToolBar = hToolBar.Tag
  SetTool

End

Public Sub OnProjectActivate()

  Dim hForm As FForm
  Dim iTab As Integer
  Dim nVisible As Integer
  Dim hCtrl As Control
  Dim sType As String
  Dim sOldTab As String
  Dim iIndex As Integer
  
  Try hForm = Project.ActiveForm
  If Not hForm Then Return
  
  If $sFamily = hForm.Family Then Return
  
  $sFamily = hForm.Family
  sOldTab = tabTool.Text
  iIndex = -1
  
  For iTab = 0 To tabTool.Count - 1
  
    nVisible = 0
    For Each hCtrl In $cToolBarFromIndex[iTab].Container.Children
    
      sType = hCtrl.Tag[1]
      hCtrl.Visible = sType = "*" Or sType = $sFamily
      If hCtrl.Visible Then Inc nVisible
    
    Next
    
    tabTool[iTab].Visible = nVisible > 1
    If tabTool[iTab].Visible Then
      If iIndex < 0 Then iIndex = iTab
      If tabTool[iTab].Text = sOldTab Then iIndex = iTab
    Endif
  
  Next
  
  tabTool.Index = iIndex
  btnDeprecated_Click
  
End

Public Sub tabTool_CloseAll()

  Dim hPanel As SidePanel = Me.Parent
  hPanel.Hidden = True

End

Public Sub btnZoom_Click()

  Dim iSize As Integer

  iSize = Settings["/Toolbox/Size", 0]
  iSize = (iSize + 1) Mod 4
  Settings["/Toolbox/Size"] = iSize
  UpdateSize

End

Public Sub SetTooltip(Optional sControl As String, sComp As String)
  
  If sComp = "$" Then sComp = "<i>" & ("Current project") & "</i>"
  lblControl.Text = sControl
  lblComp.Text = sComp
  
End

Public Sub btnDeprecated_Click()

  If $iTabDeprecated Then tabTool[$iTabDeprecated].Visible = btnDeprecated.Value
  If btnDeprecated.Value Then tabTool.Index = $iTabDeprecated

End

Public Sub tabTool_Menu()

  Dim hMenu As Menu
  Dim I As Integer
  
  mnuShow.Children.Clear
  
  For I = 0 To tabTool.Count - 1
    If Not tabTool[I].Visible Then Continue
    hMenu = New Menu(mnuShow) As "mnuShow"
    hMenu.Text = tabTool[I].Text
    hMenu.Checked = I = tabTool.Index
    hMenu.Tag = I
  Next
  
  mnuDeprecated.Checked = btnDeprecated.Value
  mnuHelp.Visible = lblControl.Text
  mnuHelp.Text = Subst(("Help on &1") & "...", lblControl.Text)
  mnuHelp.Tag = lblControl.Text
  
  mnuSize.Children[Settings["/Toolbox/Size", 0]].Checked = True
  
  mnuToolbox.Popup

End

Public Sub ToolBar_Menu()
  
  tabTool_Menu
  
End


Public Sub mnuShow_Click()
  
  tabTool.Index = Last.Tag
  
End

Public Sub mnuDeprecated_Click()

  btnDeprecated.Value = mnuDeprecated.Value

End

Public Sub mnuSize_Click()
  
  Settings["/Toolbox/Size"] = CInt(Last.Tag)
  UpdateSize
  
End

Public Sub IsDeprecatedVisible() As Boolean
  
  Return btnDeprecated.Value
  
End

Public Sub mnuHelp_Click()

  Dim sClass As String
  Dim sComp As String
  
  sClass = mnuHelp.Tag
  If Not sClass Then Return
  
  sComp = Project.Documentation.Classes[sClass].Component
  If sComp = CComponent.PROJECT_NAME Then
    Project.OpenFile(sClass)
  Else
    MHelp.ShowHelpBrowserWith(MHelp.TYPE_CLASS, sClass)
  Endif

End
