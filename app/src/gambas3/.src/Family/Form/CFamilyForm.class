' Gambas class file

Inherits CFamily

Public Const Name As String = "Form"
Public Const ControlClass As String = "Control"
Public Const VirtualCoord As Boolean = False
Public Const UseMoveScaled As Boolean = True
Public Const DropImageClass As String = "PictureBox"
Public Const DropImageProperty As String = "Picture"
Public Const AllowScaledProperty As Boolean = True
Public Const EmbedContainer As String = "Panel"
Public Const AutomaticArrangement As Boolean = False
Public Const HasMenuEditor As Boolean = True
Public Const MenuClass As String = "Menu"
Public Const ToolBarClass As String = "ToolBar"

Static Private $hConfigureImage As Image

Public Sub GetIcon(hCCtrl As CControl) As String
  
  Dim sImage As String
  
  Select hCCtrl.Kind
  
    Case "HBox"
      sImage = "horizontal"
    
    Case "VBox"
      sImage = "vertical"
      
    Case "HPanel"
      sImage = "row"
      
    Case "VPanel"
      sImage = "column"
      
    Case "HSplit"
      sImage = "hsplit"
      
    Case "VSplit"
      sImage = "vsplit"
      
    Case "Splitter"
      If hCCtrl["Arrangement"] = "Vertical" Then
        sImage = "vsplit"
      Else 
        sImage = "hsplit"
      Endif
      
    Case Else
      sImage = Super.GetIcon(hCCtrl)
      
  End Select
  
  
  If hCCtrl.GetProperty("Invert") Then
    If Exist("img/family/" &/ sImage & "-i.png") Then sImage &= "-i"
  Endif
  
  If hCCtrl.GetProperty("Centered") Then
    If Exist("img/family/" &/ sImage & "-c.png") Then sImage &= "-c"
  Endif
  
  Return sImage
  
End


Public Sub DrawControl(hCCtrl As CControl) As Boolean
  
  Dim iBorder As Integer
  Dim hCtrl As Control = hCCtrl.Control
  
  Select LCase(hCCtrl.Kind)
  
    Case "hbox", "vbox", "hpanel", "vpanel"
      
      CFamily.PaintContainer(Paint.X, Paint.Y, Paint.W, Paint.H)
      Return
  
    Case "panel"
    
      CFamily.PaintExpand(hCCtrl)
    
      Select Case hCCtrl.GetProperty("Border")
        Case "Raised"
          iBorder = Border.Raised
        Case "Sunken"
          iBorder = Border.Sunken
        Case "Etched"
          iBorder = Border.Etched
        Case "Plain"
          iBorder = Border.Plain
        Default
          CFamily.PaintContainer(Paint.X, Paint.Y, Paint.W, Paint.H)
          Return
      End Select
      
      Style.PaintPanel(0, 0, hCtrl.W, hCtrl.H, iBorder)
      Return
    
    Case "spring"
    
      CFamily.PaintExpand(hCCtrl, True)
      Return
      
    Case "toolbar"
      
      If Not $hConfigureImage Then $hConfigureImage = Picture["img/16/configure.png"].Image
      
      Paint.Brush = Paint.Image($hConfigureImage)
      Paint.Rectangle(Paint.X, Paint.Y, Paint.W, Paint.H)
      Paint.Fill 
      
      CFamily.PaintContainer(Paint.X, Paint.Y, Paint.W, Paint.H)
      If hCCtrl["Separator"] Then Paint.FillRect(Paint.X, Paint.H - 1, Paint.W, 1, Color.LightForeground)
      
      Return
      
      'Paint.DrawRect(X, Y, W, H)
      'Return

    Case Else
      
      Super.DrawControl(hCCtrl)

  End Select


End

Public Sub ActionDialog(sAction As String) As Boolean

  Dim vColor As Variant
  
  Select Case sAction
    
    Case Like ".text-*"
      Return Super.ActionDialog(sAction)
      
    Case Like ".format-*"
      If FColorChooser.Run(, True) Then Return True
      vColor = FColorChooser.ColorName
      If Not IsNull(Val(vColor)) Then vColor = Val(vColor)
      Me.ActionValue = vColor
      
  End Select
  
End

Public Sub ActionExec(hCtrl As CControl, sAction As String)
  
  Select Case sAction
    
    Case Like ".text-*"
      Super.ActionExec(hCtrl, sAction)
      
    Case ".format-background"
      If hCtrl.HasProperty("Background") Then hCtrl.SetProperty("Background", Me.ActionValue)
    
    Case ".format-foreground"
      If hCtrl.HasProperty("Foreground") Then hCtrl.SetProperty("Foreground", Me.ActionValue)
    
  End Select
  
End

Public Sub SelectImage(sPropertyType As String, sImage As String) As String

  Dim iOption As Integer
  Dim aSizes As String[]

  'If sPropertyType <> "Image" Then 
    If Project.Components.Exist("gb.form") Then
      iOption = FSelectIcon.SELECT_STOCK
      aSizes = Stock.Sizes
      aSizes.Insert(["16", "22", "24", "32", "48", "64", "96", "128", "192", "256"])
    Endif
  'Endif
  If sPropertyType = "SvgImage" Then
    iOption += FSelectIcon.SELECT_SVGIMAGE
  Else
    iOption += FSelectIcon.SELECT_IMAGE
  Endif
  
  Return FSelectIcon.Run(sImage, iOption, aSizes) 'GetPicture()
      
End
