' Gambas class file

Inherits CVersionControl
Create Static

Public Const Name As String = "Svn"
Public Const LongName As String = "Subversion"

Private $sRealDir As String
Private $bHasSVN As Boolean
Private $bCheckSVN As Boolean
Private $sSvnVersion As String
Private $bSvn17 As Boolean
Private $bCanControl As Boolean

Private Sub SvnPath$(sPath As String) As String

  If InStr(sPath, "@") Then sPath &= "@"
  If sPath Begins Project.Dir Then sPath = $sRealDir &/ Mid$(sPath, Len(Project.Dir) + 1)
  Return sPath

End

Private Sub Init()
  
  If $bCheckSVN Then Return
    
  $bHasSVN = System.Exist("svn")
  $bCheckSVN = True

  If $bHasSVN Then

    If Not $sSvnVersion Then 
      Exec ["svn", "--version", "--quiet"] To $sSvnVersion
      $sSvnVersion = Trim($sSvnVersion)
      $bSvn17 = Comp($sSvnVersion, "1.7", gb.Natural) >= 0
    Endif
    
  Endif
  
End


Public Sub Check() As Boolean
  
  Dim sResult As String
  Dim sDir As String
  
  Shell "readlink -f " & Shell$(Project.Dir) To $sRealDir
  $sRealDir = Trim($sRealDir)

  Init()

  If $bHasSVN Then

    $bCanControl = False
    
    If $bSvn17 Then
      sResult = VersionControl.Shell("svn status " & Shell$(SvnPath$($sRealDir) &/ ".project") & " 2>&1")
      If Process.LastValue = 0 And If sResult Not Like "svn:*W155007*:*" And If sResult Not Like "svn:*W155010*:*" Then Return True
    Else
      If Exist($sRealDir &/ ".svn") Then Return True
    Endif
    
    If $bSvn17 Then
      sDir = $sRealDir
      Do
        sDir = File.Dir(sDir)
        If Exist(sDir &/ ".svn") Then 
          $bCanControl = True
          Break
        Endif
        If sDir = "/" Then Break
      Loop
    Else
      $bCanControl = Exist($sRealDir &/ "../.svn")
    Endif
    
  Endif

End

Public Sub AddFile(sPath As String, Optional bForce As Boolean)

  Dim aCmd As String[]

  aCmd = ["svn", "add", SvnPath$(sPath)]
  If bForce Then aCmd.Add("--force", 2)
  VersionControl.Run(aCmd)
  
End

Public Sub AddDir(sPath As String)
  
  VersionControl.Run(["svn", "add", SvnPath$(sPath)])
  
End

Public Sub RemoveFile(sPath As String, Optional (bForce) As Boolean)

  Dim aCmd As String[]

  aCmd = ["svn", "remove", SvnPath$(sPath), "--force"]
  'If bForce Then aCmd.Add("--force", 2)
  VersionControl.Run(aCmd)

End

Public Sub RemoveDir(sPath As String)

  RemoveFile(sPath, True)

End

Public Sub MoveFile(sOld As String, sNew As String)

  AddFile(sNew)
  RemoveFile(sOld, True)

End

Public Sub MoveDir(sOld As String, sNew As String) As Boolean

  VersionControl.Run(["svn", "move", "--force", SvnPath$(sOld), SvnPath$(sNew)])

End

Private Sub UpdatePathFromStatus(sStatus As String)

  Dim sFile As String
  Dim sExt As String
  Dim sPath As String

  For Each sStatus In Split(sStatus, "\n")

    sFile = Mid$(sStatus, 9)
    sPath = Project.Dir &/ sFile

    If Left(sStatus) = "D" Then
      Project.SetFlag(sPath, Project.FLAG_LOCKED)
    Else If Left(sStatus) = "C" Then
      Project.SetFlag(sPath, Project.FLAG_CONFLICT)
    Else If Left(sStatus) = "?" Then
      If Left(File.Name(sFile)) = "." Then Continue
      If sFile Begins ".lang/" Then Continue
      If sFile Begins ".gambas/" Then Continue
      If sFile = Project.Name & ".gambas" Then Continue
      sExt = File.Ext(sFile)
      If Left(sExt) = "r" And IsDigit(Mid$(sExt, 2)) And If Exist(Project.Dir &/ File.Dir(sFile) &/ File.BaseName(sFile)) Then Continue
      Project.SetFlag(sPath, Project.FLAG_ADDED)
    Else If Left(sStatus) <> " " Then
      Project.SetFlag(sPath, Project.FLAG_MODIFIED)
    Endif

  Next

End

Public Sub CheckPaths()

  Dim sStatus As String

  sStatus = VersionControl.Shell("cd " & Shell$($sRealDir) & "; svn status --no-ignore", True)
  UpdatePathFromStatus(sStatus)

End

Public Sub Status(Optional sPath As String) As String

  Dim sStatus As String
  Dim sCmd As String

  sCmd = "cd " & Shell$($sRealDir) & "; svn status -q" 
  If sPath Then sCmd &= " " & Shell$(SvnPath$(sPath))

  sStatus = VersionControl.Shell(sCmd, True)
  Return sStatus
  
End

Public Sub Commit(sChange As String, (bDoNotPush) As Boolean) As Boolean

  Dim sFile As String = Temp$()

  File.Save(sFile, sChange) 
  VersionControl.Run(["svn", "commit", "--file", sFile, SvnPath$($sRealDir)], True, False, VersionControl.LANG_ENV)
  Return Process.LastValue

End

Public Sub Update() As Integer

  Return VersionControl.Run(["svn", "update", SvnPath$($sRealDir), "--accept", "postpone"], True)

End

Public Sub Revert(Optional sPath As String) As Boolean

  If sPath Then
    VersionControl.Run(["svn", "revert", SvnPath$(sPath)])
  Else
    VersionControl.Run(["svn", "-R", "revert", SvnPath$($sRealDir)])
  Endif
  Return Process.LastValue

End

Public Sub InConflict(sPath As String) As Boolean

  If Not Exist(sPath) Then
    Debug sPath; ": does not exist"
    Return False
  Endif
  If Dir(File.Dir(sPath), File.Name(sPath) & ".r*").Count Then Return True

End

Public Sub SolveConflict(sPath As String, Optional iAccept As Integer) As Boolean

  Dim aArg As String[]
  
  Select Case iAccept
    Case VersionControl.ACCEPT_OURS
      aArg = ["svn", "resolve", SvnPath$(sPath), "--accept", "theirs-full"]
    Case VersionControl.ACCEPT_THEIRS
      aArg = ["svn", "resolve", SvnPath$(sPath), "--accept", "mine-full"]
    Default
      aArg = ["svn", "resolved", SvnPath$(sPath)]
  End Select
  
  VersionControl.Run(aArg)
  Return Process.LastValue

End

Public Sub Checkout(sPath As String, sDir As String) As Boolean

  VersionControl.Run(["svn", "checkout", SvnPath$(sPath), SvnPath$(sDir)], True)
  
End

Public Sub GetVersion(sDir As String) As String

  Dim sRes As String

  If Exist(sDir &/ ".svn") Then
    sRes = VersionControl.Shell("cd " & Shell$(sDir) & "; " & VersionControl.LANG_ENV.Join(" ") & " svn info")
    Try sRes = Scan(sRes, "*\nRevision: *\n*")[1]
    If Error Then 
      Return "?"
    Else
      Return "r" & sRes
    Endif
  Endif

End

Public Sub Diff(sPath As String, Optional (bFull) As Boolean, (bNoWhiteSpace) As Boolean) As String

  Dim sDiff As String

  sDiff = VersionControl.Shell("svn diff " & Shell$(SvnPath$(sPath)))
  Return sDiff

End

Public Sub History(sPath As String, Optional sPath2 As String, (bFull) As Boolean) As String

  Dim sCmd As String

  sCmd = "svn log " & Shell$(SvnPath$(sPath))
  If sPath2 Then sCmd &= " " & Shell$(SvnPath$(sPath2))
  Return VersionControl.Shell(sCmd)

End

Private Sub FormatSvnDate(sDate As String) As String

  Dim aDate As String[]
  
  aDate = Split(sDate, "*-*-* *:*:* *")
  Try Return Format(Date(CInt(aDate[0]), CInt(aDate[1]), CInt(aDate[2]), CInt(aDate[3]), CInt(aDate[4]), CInt(aDate[5])), gb.GeneralDate)
  If Error Then Return sDate & " ?"

End

Public Sub Info() As Collection

  Dim sLine As String
  Dim aLine As String[]
  Dim sUrl As String
  Dim cInfo As New Collection
  Dim cData As New Collection
  
  If VersionControl.Run(["svn", "info", SvnPath$($sRealDir)], False, False, VersionControl.LANG_ENV) = 0 Then
  
    cData.Clear
    For Each sLine In Split(VersionControl.Output, "\n", "", True)
      aLine = Scan(sLine, "*: *")
      'If aLine[0] = "Repository Root" Then sUrl = Trim(aLine[1])
      cData[Trim(aLine[0])] = Trim(aLine[1])
    Next
    
    cInfo[("Local root path")] = cData["Working Copy Root Path"]
    cInfo[("Revision")] = cData["Revision"]
    cInfo[("Last commit author")] = cData["Last Changed Author"]
    cInfo[("Last commit date")] = FormatSvnDate(cData["Last Changed Date"])
    sUrl = cData["Repository Root"]
    
  Endif
  
  If sUrl Then
  
    If VersionControl.Run(["svn", "info", SvnPath$(sUrl)], True, False, VersionControl.LANG_ENV) = 0 Then
    
      cData.Clear
      For Each sLine In Split(VersionControl.Output, "\n", "", True)
        aLine = Scan(sLine, "*: *")
        cData[Trim(aLine[0])] = Trim(aLine[1])
      Next
      
      cInfo[("Remote repository URL")] = sURL
      cInfo[("Remote revision")] = cData["Revision"]
      cInfo[("Remote last commit author")] = cData["Last Changed Author"]
      cInfo[("Remote last commit date")] = FormatSvnDate(cData["Last Changed Date"])
      
    Endif
    
  Endif
  
  Return cInfo
  
End


Public Sub CleanUp(sPath As String)

  VersionControl.Run(["svn", "cleanup", SvnPath$(sPath)])
  
End

Public Sub GetDefaultJournal() As String
  
  Return VersionControl.GetDelimChange() & "\n\n" & Status()
  
End

Public Sub UpdatePath(sPath As String, Optional sPath2 As String)

  Dim sStatus As String
  Dim sCmd As String

  ' svn status is automatically recursive!
  sCmd = "cd " & Shell$($sRealDir) & "; svn status --no-ignore " & Shell(Mid$(sPath, Len(Project.Dir) + 2))
  If sPath2 Then sCmd &= " " & Shell(Mid$(sPath2, Len(Project.Dir) + 2))

  sStatus = VersionControl.Shell(sCmd, True)
  UpdatePathFromStatus(sStatus)

End

Public Sub CanControlProject() As Boolean

  Return $bCanControl

End

Public Sub ControlProject() As Boolean
  
  If Not $bCanControl Then Return True
  If VersionControl.Run(["svn", "add", "--parents", SvnPath$($sRealDir)]) Then Return True
  
End

Public Sub HasRemote() As Boolean
  
  Return True
  
End
