' Gambas class file

Public Shown As Boolean

Private Enum TAB_DEBUG, TAB_CONSOLE, TAB_COMPILATION, TAB_TASK, TAB_TEST, TAB_VERSION_CONTROL, TAB_SEARCH

Private $cRefreshTask As New Collection
Private $aTask As CTask[]

'Private $cLocal As New Collection ' key -> row
'Private $bSortLocal As Boolean

'Private $bSortObject As Boolean

Private $hForm As FEditor

Private $sLastLocal As String
Private $sLastObject As String

Private $hBreakpoint As Picture
Private $hDisabledBreakpoint As Picture
Private $iTestBg As Integer

Private $cTrack As Collection
Private $iTrackId As Integer

Private $iChangeColor As Integer
Private $iErrorColor As Integer

Public Sub _new()
  
  With cvwVariable
    .Columns.Count = 2
  End With
  
  With cvwObject
    .Columns.Count = 2
  End With
  
  With gvwFind
    .AddColumn(("File"))
    .AddColumn(("Location"))
    .AddColumn(("Line"))
    .AddColumn(("Col."))
    .AddColumn(("Text"))
  End With
  
  With gvwTask
    .AddColumn(("Type"))
    .AddColumn(("Class"))
    .AddColumn(("Line"))
    .AddColumn(("Text"), -1)
  End With
  
  With gvwCompilation
    .AddColumn(("Class"))
    .AddColumn(("Line"))
    '.AddColumn(("Col."))
    .AddColumn(("Message"))
  End With
  
  HideTab(TAB_COMPILATION)
  'wizDebug[TAB_SEARCH].Closable = True
  
  splDebug.MinSize = Desktop.Scale * 24
  splDebug.Layout = [1, 3]
  
  lblError.Padding = Desktop.Scale \ 2
  
  ReadConfig
  'UpdateLocal
  
End

Public Sub Form_Open()
  
  FOutput.Load(panConsole)
  HideTab(TAB_SEARCH)
  UpdateView
  'GotoConsole
  
End

Public Sub Clear()
  
  lvwStack.Clear
  cvwVariable.Clear
  cvwObject.Clear
  
End

Public Sub EnableStack(bOn As Boolean)
  
  lvwStack.Enabled = bOn
  
End

Public Sub FillStack(aPos As String[]) As Boolean
  
  Dim sPos As String
  Dim iInd As Integer
  Dim sKey As String
  Dim W As Integer
  
  Object.Lock(lvwStack)
  
  If lvwStack.Count And If aPos[0] = lvwStack[0].Text Then
    sKey = lvwStack.Key
  Else
    sKey = 0
  Endif
  
  lvwStack.Clear
  
  W = Desktop.Scale * 16
  For Each sPos In aPos
    If sPos = "?" Then
      lvwStack.Add(iInd, "(" & ("native code") & ")").Foreground = Color.LightForeground
    Else
      lvwStack.Add(iInd, sPos)
      W = Max(W, lvwStack.Font.TextWidth(sPos))
    Endif
    Inc iInd
  Next
  
  lvwStack.W = W + Desktop.Scale * 2
  
  If lvwStack.Exist(sKey) Then
    lvwStack[sKey].Selected = True
    lvwStack[sKey].EnsureVisible
  Endif
  Object.Unlock(lvwStack)
  
  Return lvwStack.Key = "0"
  
End

Public Sub lvwStack_Click()
  
  Dim sLoc As String
  
  Design.Command("@" & lvwStack.Key)
  FDebugExpr.RefreshAll
  RefreshAllWatch
  
  sLoc = lvwStack.Current.Text
  If InStr(sLoc, "(") Then Return
  
  Project.Goto(sLoc)
  
Catch
  
End

Private Sub AddVariableHeader(hView As ColumnView, sKey As String, sText As String)

  If hView.Exist(sKey) Then Return
  
  With hView.Add(sKey, sText)
    .MoveFirst()
    .Font = lvwStack.Font
    .Background = Color.SetAlpha(Color.Foreground, 240)
  End With

End

Private Sub UpdateWatch(sExpr As String, Optional sVal As String)

  AddVariableHeader(cvwVariable, "@", ("Watch expressions"))
  cvwVariable["@"].MoveLast
  
  Try cvwVariable.Add("@" & sExpr, sExpr,, "@").EnsureVisible
  
  With cvwVariable["@" & sExpr]
    If sVal Then
      If Left(sVal) = "!" Then 
        sVal = Mid$(sVal, 2)
        .Foreground = $iErrorColor
        .Background = Color.Default
      Else
        If .[1] <> sVal Then
          .Foreground = Color.Default
          .Background = $iChangeColor
        Else
          .Foreground = Color.Default
          .Background = Color.Default
        Endif
      Endif
      .[1] = sVal
    Endif
    If $cTrack.Exist(.Key) Then 
      .Picture = $hBreakpoint 'Picture["icon:/" & CStr(cvwVariable.Font.H) & "/watch"]
    Else
      .Picture = Null
    Endif
  End With

  UpdateWatchButtons

End

Public Sub AddResultWatch(sCmd As String, Optional sRes As String, Optional bInstant As Boolean)
  
  Dim sVal As String
  
  'IF Left$(sRes, 1) = "=" THEN
  '  sVal = Mid$(sRes, 2)
  'ELSE
  '  sVal = "** " & sRes
  'ENDIF
  sVal = sRes
  
  If bInstant Then 
    
    If Right(sCmd) = ":" Then
      
      If FDebugExpr.Exist(Left(sCmd, Len(sCmd) - 1)) Then Return 
      
      'ShowAsBalloon(sVal)
      If $hForm Then 
        $hForm.ShowWatchResult(sVal) ', $iX, $iY)
        $hForm = Null
      Else
        FOutput.Insert(sVal)
      Endif
      
    Else 
      Design.Command("#X" & sCmd & "\t" & sCmd)  
    Endif 
    
  Else
    
    UpdateWatch(sCmd, sVal)
    
  Endif
  
End

Public Sub RefreshAllWatch()
  
  If cvwVariable.MoveTo("@") Then Return
  If cvwVariable.MoveChild() Then Return
  
  Repeat
    Design.Command("?W" & cvwVariable.Item.Text & "\t" & cvwVariable.Item.Text)
  Until cvwVariable.MoveNext()
  
End

Public Sub AddWatch(sExpr As String)
  
  If cmbWatch.Find(sExpr) < 0 Then cmbWatch.Add(sExpr)
  
  Design.Command("?W" & sExpr & "\t" & sExpr)
  
End

Public Sub InstantWatch(sExpr As String, hForm As FEditor)
  
  If Not sExpr Then Return
  
  $hForm = hForm
  Design.Command("?I" & sExpr & "\t" & sExpr)
  
End

Private Sub GetWatchExpression() As String
  
  Return Trim(cmbWatch.Text)
  
End


Public Sub cmbWatch_Activate()
  
  Dim sExpr As String
  
  sExpr = GetWatchExpression()
  If Not sExpr Then Return
  
  AddWatch(sExpr)
  cmbWatch.Text = ""
  
End

Public Sub btnAddWatch_Click()
  
  cmbWatch_Activate
  
End

Public Sub btnKillWatch_Click()
  
  Dim sKey As String
  
  sKey = cvwVariable.Key
  If sKey Begins "@" Then 
    If sKey = "@" Then Return
    cvwVariable.Remove(sKey)
    RemoveTrack(Mid$(sKey, 2))
    If cvwVariable["@"].Children = 0 Then cvwVariable.Remove("@")
  Endif
  
  UpdateWatchButtons
  
End

Public Sub cmbWatch_Click()
  
  cmbWatch_Activate
  
End

Private Sub WatchExpression(sText As String)
  
  Design.Command("#X" & sText & "\t" & sText)  
  
End

Private Sub InitFont(hView As ColumnView, fSize As Float)

  Dim sKey As String
  
  Project.SetConsoleFont(hView)
  
  For Each sKey In hView.Keys
    If hView[sKey].Font Then hView[sKey].Font.Size = hView.Font.Size * fSize
  Next
  hView.Font.Size *= fSize
  
End

Public Sub ReadConfig()
  
  Dim hCtrl As Control
  Dim fSize As Float
  Dim hImage As Image
  
  Settings.Read(panDebug)
  wizDebug.TextFont = Project.GetSmallFont()
  
  Project.SetSmallFont(gvwTask)
  Project.SetSmallFont(gvwCompilation)
  
  fSize = Project.GetPercentFontSize("/DebuggerFontSize", 80)
  
  Project.SetNormalFont(lvwStack, fSize)
  Project.SetNormalFont(lvwBreakpoint, fSize)

  InitFont(cvwVariable, fSize)
  InitFont(cvwObject, fSize)
  
  cmbWatch_Change
  Project.SetEditorFont(lblError)
  picError.Padding = Desktop.Scale \ 2
  
  FDebugButton.ReadConfig
  
  Project.SetConsoleFont(trmVersionControl)
  MTheme.InitControl(trmVersionControl)
  Project.SetConsoleFont(trmTest)
  MTheme.InitControl(trmTest)

  For Each hCtrl In [panBreakpoint, panSearch, panVersionControl, panTest]
    Project.SetSmallFont(hCtrl)
  Next
  
  'btnChanges.Picture = Picture["img/32/modified.png"].Stretch(Stock.GetSize("small"))
  
  'H = Max(Stock.GetSize("small"), cmbWatch.Font.H) * 1.4
  'panWatch.H = H
  ' For Each hChild In panWatch.Children
  '   If hChild Is PictureBox Or If hChild Is ToolButton Then hChild.W = hChild.H
  ' Next
  
  $iChangeColor = Color.Merge(MTheme.GetColor("Highlight"), Color.Background)
  $iErrorColor = MTheme.GetColor("Error")

  $hBreakpoint = Picture["img/32/breakpoint.png"].Stretch(cvwVariable.Font.H)
  $hDisabledBreakpoint = $hBreakpoint.Image.Desaturate().Gamma(0.3).Picture
  
  lblError.Foreground = MTheme.GetColor("Normal")
  panError.Background = MTheme.GetColor("Breakpoint")
  
  hImage = Image.Load("img/32/error.png")
  hImage.Colorize(lblError.Foreground)
  picError.Picture = hImage.Picture
  
End

Public Sub wizDebug_Click()
  
  ' If Design.IsRunning() Then 
  '   Select Case wizDebug.Index
  '     Case TAB_CONSOLE
  '       FOutput.SetFocus
  '   End Select
  '   Return
  ' Endif
  
  Select Case wizDebug.Index
    Case TAB_DEBUG
      If Design.IsRunning() Then
        DefineVariable($sLastLocal, $sLastObject)
        RefreshBreakpoints
      Endif
    Case TAB_CONSOLE
      If FMain.IsDebugVisible() Then FOutput.SetFocus
    Case TAB_TASK
      If Not Design.IsRunning() Then
        If Not $aTask Then
          UpdateTask
        Else
          timTask_Timer
        Endif
      Endif
    Case TAB_SEARCH
      If Not Design.IsRunning() Then
        FSearch.RefreshBrowse
      Endif
    Case TAB_TEST
      UpdateTestSuites
      
  End Select   
  
End

Public Sub tbvLocal_Activate()
  
  Dim hTable As TableView = Last
  Dim sExpr As String 
  Dim sVal As String 
  Dim iCol As Integer
  
  If hTable[hTable.Row, 0].ColumnSpan >= 2 Then Return
  
  iCol = hTable.Column And Not 1
  sExpr = hTable[hTable.Row, iCol].Text
  sVal = hTable[hTable.Row, iCol + 1].Text
  
  If Left(sVal) = "(" Then 
    Design.Command("#X" & sExpr & "\t" & sExpr)
  Else
    hTable.Column = iCol + 1 
    hTable.Edit
  Endif
  
End

Public Sub IsEditing() As Boolean
  
  If cvwVariable.Renaming Or If cvwObject.Renaming Then Return True
  
End

Public Sub tbvObject_Activate()
  
  tbvLocal_Activate
  
End

Public Sub WriteWatchSettings()
  
  Dim iInd As Integer
  Dim sFlag As String
  Dim iCount As Integer
  Dim sExpr As String
  Dim aTrack As New Integer[]
  
  sFlag = "/Watches"
  iInd = 0
  Project.Config.Clear(sFlag)
  
  Try iCount = cvwVariable["@"].Children
  
  Project.Config[sFlag &/ "Count"] = iCount
  If iCount Then
    
    cvwVariable.MoveTo("@")
    cvwVariable.MoveChild()
    While cvwVariable.Available
      Inc iInd
      sExpr = cvwVariable.item.Text
      Project.Config[sFlag &/ "Watch[" & CStr(iInd) & "]"] = sExpr
      If $cTrack.Exist("@" & sExpr) Then aTrack.Add(iInd)
      cvwVariable.MoveNext()
    Wend
    
  Endif
  
  If aTrack.Count Then Project.Config[sFlag &/ "Track"] = aTrack
  
End

Public Sub ReadWatchSettings()
  
  Dim iCount As Integer
  Dim iInd As Integer
  Dim sFlag As String
  Dim sExpr As String
  Dim aTrack As Integer[]
  
  sFlag = "/Watches"
  iInd = 0
  iCount = Project.Config[sFlag &/ "Count", "0"]
  aTrack = Project.Config[sFlag &/ "Track"]
  If Not aTrack Then aTrack = New Integer[]
  
  Try cvwVariable.Remove("@")
  
  For iInd = 1 To iCount
    sExpr = Project.Config[sFlag &/ "Watch[" & CStr(iInd) & "]"]
    AddResultWatch(sExpr)
    If aTrack.Exist(iInd) Then AddTrack(sExpr)
  Next
  
End

Public Sub UpdateView()
  
  Dim bUndock As Boolean = Settings["/FOutput/Undock"]
  Dim bVisible As Boolean
  
  If bUndock Then  
    If FOutput.Parent Then 
      FOutput.Reparent(Null)
      FOutput.Enabled = True
      'DEBUG "Read: "; Settings["/FOutput/Geometry"][0];; Settings["/FOutput/Geometry"][1]
      Settings.Read(FOutput)
      FOutput.OnProjectDebug
      FOutput.Show
      FMain.ShowDebug(False)
      'DEBUG FOutput.X;; FOutput.Y
      'Action["console"].Visible = TRUE
      'If Not Project.Running Then FMain.ShowDebug(False)
    Endif
    'FOutput.Stacking = If(Project.Running, Window.Above, Window.Normal)
  Endif
  
  ShowTab(TAB_CONSOLE, Not bUndock)
  ShowTab(TAB_DEBUG, Project.Running)
  ShowTab(TAB_VERSION_CONTROL, VersionControl.Enabled)
  
  ' If panStack.Visible <> Project.Running Then
  '   If Project.Running Then
  '     panStack.Visible = True
  '     Settings.Read(panDebug)
  '     'Settings.Read(splDebug,, [4, 1])
  '   Else 
  '     Settings.Write(panDebug)
  '     'Settings.Write(splDebug)
  '     panStack.Visible = False
  '   Endif
  ' Endif
  
  ' panButtonCompilation.Visible = Not Project.Running
  ' panButtonTask.Visible = Not Project.Running
  ' panButtonSearch.Visible = Not Project.Running
  
  If Not bUndock Then 
    If Not FOutput.Parent Then 
      bVisible = FOutput.Visible
      'DEBUG "Write: "; FOutput.X;; FOutput.Y
      Settings.Write(FOutput)
      FOutput.Reparent(panConsole, 0, 0)
      FOutput.Show
      'Action["console"].Value = TRUE
      'Action["console"].Visible = FALSE
      'If bVisible Then FMain.ShowDebug(True)
    Endif
    
    'SelectTab(TAB_CONSOLE)
    'FOutput.SetFocus
    
  Endif 
  
  FDebugButton.UpdateView
  FMain.UpdateConsoleAction()
  
End

Public Sub btnShowMe_Click()
  
  WatchExpression("Me")
  
End

Public Sub tbvLocal_Scroll()
  
  Balloon.Hide(Last)
  
End

Public Sub tbvLocal_Select()
  
  Balloon.Hide(Last)
  
End

Public Sub tbvObject_Scroll()
  
  Balloon.Hide(Last)
  
End

Public Sub tbvObject_Select()
  
  Balloon.Hide(Last)
  
End

Public Sub GetSearchList() As Control
  
  Return gvwFind
  
End

Public Sub ShowSearchList()
  
  FMain.ShowDebug(True)
  gvwFind.Show
  lblNotFound.Hide
  'lblBrowse.Hide
  ShowTab(TAB_SEARCH)
  SelectTab(TAB_SEARCH)
  
End

Public Sub HideSearchList()
  
  gvwFind.Hide
  lblNotFound.Show
  
End

Public Sub SetSearchListInfo(Optional sText As String)
  
  lblBrowse.Text = sText
  gvwFind.Visible = sText
  lblNotFound.Visible = Not sText
  'lblBrowse.Show
  
End

Public Sub StartSearch()
  
  spnSearch.Start
  spnSearch.Show
  
End

Public Sub StopSearch()
  
  spnSearch.Stop
  spnSearch.Hide
  
End

Public Sub btnShowSearch_Click()
  
  FSearch.WakeUp(False, True)
  
End

Public Sub btnRefreshSearch_Click()
  
  FSearch.BrowseAgain
  
End

Private Sub DisableRec(hCtrl As Control, aExcept As Control[], bOn As Boolean)
  
  Dim hCont As Container
  Dim iCount As Integer
  Dim hMulti As Object
  Dim iInd As Integer
  
  If Not aExcept.Exist(hCtrl) Then
    hCtrl.Enabled = bOn
    Return
  Endif
  
  If Not hCtrl Is Container Then Return
  
  hCont = hCtrl
  hMulti = hCtrl
  
  Try iCount = hMulti.Count
  If Not Error Then
    For iInd = 0 To iCount - 1
      If iInd <> hMulti.Index Then
        hMulti[iInd].Enabled = bOn
      Endif
    Next
  Endif
  
  For Each hCtrl In hCont.Children
    DisableRec(hCtrl, aExcept, bOn)
  Next
  
End

Private Sub DisableEverything(bOn As Boolean)
  
  Dim aCtrl As New Control[]
  Dim hCtrl As Control
  Dim hWin As Window
  
  For Each hWin In Windows
    If Not Object.IsValid(hWin) Then Continue
    If hWin = FMain.Window Or If hWin = FSearch.Window Then Continue
    hWin.Enabled = bOn
  Next
  
  hCtrl = btnCancelSearch
  While hCtrl
    aCtrl.Add(hCtrl)
    hCtrl = hCtrl.Parent
  Wend
  aCtrl.Add(lblBrowse)
  
  DisableRec(FMain.Window, aCtrl, bOn)
  
  aCtrl.Clear
  aCtrl.Add(FSearch.Window)
  
  DisableRec(FSearch.Window, aCtrl, bOn)
  
End

Public Sub EnableGUI(bOn As Boolean)
  
  'lblBrowse.Visible = Not bOn
  btnCancelSearch.Visible = Not bOn
  DisableEverything(bOn)
  
End

Public Sub btnCancelSearch_Click()
  
  FSearch.Cancel()
  
End

Public Sub IsSearchListVisible() As Boolean
  
  Return wizDebug.Index = TAB_SEARCH And FMain.IsDebugVisible()
  
End

Private Sub GotoConsole()
  
  If IsNull(FOutput.Parent) Then
    SelectTab(TAB_COMPILATION)
  Else
    SelectTab(TAB_CONSOLE)
  Endif
  
End

' Public Sub btnClearSearch_Click()
' 
'   FSearch.ResetBrowse
'   GotoConsole
'   tabDebug[TAB_SEARCH].Visible = False
' 
' End

Public Sub OnVisibilityChange()
  
  RefreshTabs()
  
End

Public Sub ShowConsole()
  
  If FOutput.Parent Then FDebugButton.SelectButton(TAB_CONSOLE)
  FOutput.SetFocus
  
End

Private Sub RefreshBreakpoints()

  Dim sBreakpoint As String
  Dim H As Integer
  
  If wizDebug.Index <> TAB_DEBUG Then Return

  lvwBreakpoint.Clear
  For Each sBreakpoint In Breakpoints.GetAll()
    H = lvwBreakpoint.Add(sBreakpoint, sBreakpoint).H
  Next
  
  If lvwBreakpoint.Count = 0 Then
    lvwBreakpoint.Hide
    panBreakpoint.Hide
    sepBreakpoint.Hide
    sepBreakpoint2.Hide
  Else
    lvwBreakpoint.Show
    panBreakpoint.Show
    sepBreakpoint.Show
    sepBreakpoint2.Show
    lvwBreakpoint.H = H * Min(4, lvwBreakpoint.Count)
  Endif
  
End

Public Sub RefreshTabs(Optional sPath As String, (sName) As String)
  
  If Not Project.Path Or If Project.IsFake() Then Return
  If Not FMain.IsDebugVisible() Then Return 
  If sPath Then RefreshTask(sPath)
  RefreshBreakpoints
  If IsSearchListVisible() Then FSearch.RefreshBrowse
  
End

Public Sub RefreshTask(sPath As String)
  
  $cRefreshTask[sPath] = sPath
  If wizDebug.Index = TAB_TASK Then
    timTask.Restart
  Endif
  
End

Private Sub AfterRefreshTask()
  
  $aTask.Sort
  $cRefreshTask.Clear
  gvwTask.Rows.Count = $aTask.Count
  gvwTask_Font
  gvwTask.Refresh
  
End

Public Sub gvwTask_Font()

  Dim I As Integer
  
  For I = 0 To gvwTask.Columns.Max - 1
    gvwTask.Columns[I].W = -1
  Next

End  

Public Sub UpdateTask()
  
  Dim sPath As String
  
  If wizDebug.Index <> TAB_TASK Then Return
  
  Inc Application.Busy
  
  $aTask = New CTask[]
  For Each sPath In Project.Tree.Sources
    $aTask.Insert(CTask.ScanFile(sPath))
  Next
  
  AfterRefreshTask
  
  Dec Application.Busy
  
End

Public Sub timTask_Timer()
  
  Dim sPath As String
  Dim sClass As String
  Dim I As Integer
  
  If Not $aTask Then Return
  If $cRefreshTask.Count = 0 Then Return
  
  For Each sPath In $cRefreshTask
    
    sClass = File.BaseName(sPath)
    
    I = 0
    While I < $aTask.Count
      If $aTask[I].Class = sClass Then
        $aTask.Remove(I)
      Else
        Inc I
      Endif
    Wend
    
    $aTask.Insert(CTask.ScanFile(sPath))
    
  Next
  
  AfterRefreshTask
  
  timTask.Stop
  
End

Public Sub gvwTask_Data(Row As Integer, Column As Integer)
  
  Dim hTask As CTask
  
  If Not $aTask Then Return
  hTask = $aTask[Row]
  
  With gvwTask.Data
    
    Select Case hTask.Type
      Case CTask.TYPE_NOTE
        .Foreground = Color.Default
      Case CTask.TYPE_FIXME
        .Foreground = Color.Gradient(Color.Red, Color.TextForeground)
      Case CTask.TYPE_TODO
        .Foreground = Color.Gradient(Color.Green, Color.TextForeground)
    End Select
    
    Select Case Column
        
      Case 1
        .Text = hTask.Class
        
      Case 2
        .Text = CStr(hTask.Line)
        
      Case 0
        Select Case hTask.Type
          Case CTask.TYPE_NOTE
            .Text = "NOTE"
          Case CTask.TYPE_FIXME
            .Text = "FIXME"
          Case CTask.TYPE_TODO
            .Text = "TODO"
        End Select
        
      Case 3
        .Text = hTask.Text
        
    End Select
    
  End With
  
End

Public Sub gvwTask_Activate()
  
  Dim hTask As CTask = $aTask[gvwTask.Row]
  
  Project.OpenFile(hTask.Name, hTask.Line)
  
Catch  
  
End

Public Sub OnProjectChange()
  
  $aTask = Null
  UpdateTask
  SetCompilation()
  CloseSearch
  trmVersionControl.Clear
  trmTest.Clear
  panTestResult.Hide
  $cTrack = New Collection
  
End

Public Sub ShowError(sMsg As String)

  panError.Show
  sepError.Show

  lblError.Text = sMsg
  panDebug_Arrange

  If Not Me.Visible Then
    sMsg = Replace(sMsg, "\n", "<br>")
    Message.Error(sMsg)
  Else
    FDebugButton.SelectButton(TAB_DEBUG)
  Endif
  
End

Public Sub SetCompilation(Optional aOutput As String[])
  
  Dim sLine As String
  Dim aLine As String[]
  Dim I As Integer
  Dim aPos As String[]
  
  gvwCompilation.Clear
  If Not aOutput Or If aOutput.Count = 0 Then 
    HideTab(TAB_COMPILATION)
    'GotoConsole
    Return
  Endif
  
  aOutput.Sort(gb.Natural)
  gvwCompilation.Rows.Count = aOutput.Count
  
  For Each sLine In aOutput
    
    aLine = Scan(sLine, "*:*: warning: *")
    If aLine.Count <> 3 Then 
      aLine = Scan(sLine, "gbc3: warning: *")
      If aLine.Count <> 1 Then Continue
      aLine.Add("", 0)
      aLine.Add("", 0)
    Endif
    
    gvwCompilation[I, 0].Text = Trim(File.BaseName(aLine[0]))
    If InStr(aLine[1], ":") Then
      aPos = Split(aLine[1], ":")
      gvwCompilation[I, 1].Text = aPos[0]
      'gvwCompilation[I, 2].Text = aPos[1]
    Else
      gvwCompilation[I, 1].Text = aLine[1]
    Endif
    gvwCompilation[I, 2].Text = String.UCaseFirst(Project.TranslateMessage(Trim(aLine[2])))
    gvwCompilation[I, 2].Font = Project.GetEditorFont()
    Inc I
    
  Next
  
  gvwCompilation.Rows.Count = I
  gvwCompilation_Font
  
  ShowTab(TAB_COMPILATION)
  'wizDebug[TAB_COMPILATION].Text = ("Warnings") & " (" & gvwCompilation.Rows.Count & ")"
  
  Action["console"].Value = True
  SelectTab(TAB_COMPILATION)
  
End

Public Sub gvwCompilation_Font()
  
  gvwCompilation.Columns[0].Width = -1
  gvwCompilation.Columns[1].Width = -1
  
End


Public Sub gvwCompilation_Select()
  
  Dim I As Integer = gvwCompilation.Row
  'Dim iCol As Integer
  
  'Try iCol = CInt(gvwCompilation[I, 2].Text)
  'If Error Then iCol = -1
  Project.OpenFile(gvwCompilation[I, 0].Text, CInt(gvwCompilation[I, 1].Text))
  
Catch  
  
End

Public Sub GotoFirstWarning()
  
  If gvwCompilation.Rows.Count = 0 Then Return
  gvwCompilation.Row = 0
  'gvwCompilation_Activate
  
End

' Public Sub btnLocalCopy_Click()
' 
'   Dim sText As String
'   Dim I As Integer
'   
'   For I = 0 To $aLocal.Max
'     sText &= $aLocal[I] & " = " & $aValLocal[I] & "\n"
'   Next
'   
'   Clipboard.Copy(sText)
' 
' End

Private Sub CloseSearch()
  
  FSearch.ResetBrowse
  If wizDebug[TAB_SEARCH].Enabled Then
    If wizDebug.Index = TAB_SEARCH Then GotoConsole
    HideTab(TAB_SEARCH) 
  Endif
  
End

Public Sub SelectTab(iTab As Integer)
  
  If wizDebug.Index = iTab Then Return
  
  wizDebug.Index = iTab
  FDebugButton.SelectButton(iTab)
  
End

Private Sub ShowTab(iTab As Integer, Optional bShow As Boolean = True)
  
  If bShow Then
    wizDebug[iTab].Enabled = True
    FDebugButton.ShowButton(iTab, True)
  Else
    HideTab(iTab)
  Endif
  
End

Private Sub HideTab(iTab As Integer) As Boolean
  
  wizDebug[iTab].Enabled = False
  FDebugButton.ShowButton(iTab, False)
  
End

Public Sub GetCurrentTab() As Integer
  
  Return wizDebug.Index
  
End

Public Sub btnCloseSearch_Click()
  
  CloseSearch
  FMain.ShowDebug(False)
  
End

Private Sub RefreshVariable()

  Dim sRoot As String
  Dim hTree As ColumnView

  For Each sRoot In ["^", "~"]
    
    hTree = If(sRoot = "^", cvwObject, cvwVariable)

    If Not hTree.MoveTo(sRoot) Then
      If hTree.Item.Expanded Then
        If Not hTree.MoveChild() Then
          Repeat
            With hTree.Item
              Design.Command("&V" & .Key & "\t" & .Text)
            End With
          Until hTree.MoveNext()
        Endif
      Endif
    Endif
    
  Next

End

Public Sub DefineVariable(sLocal As String, sObject As String)
  
  Dim aLocal As String[]
  Dim aObject As String[]
  Dim sVar As String
  Dim hPict As Picture
  Dim sParent As String
  Dim bBold As Boolean
  Dim hBold As Font
  Dim vLayout As Variant
  Dim I As Integer
  Dim sPrefix As String
  
  aLocal = Split(sLocal, " ")
  aObject = Split(sObject, " ")
  
  If sObject <> $sLastObject Then
    
    If cvwObject.Count Then 
      vLayout = cvwObject.Layout
    Else
      vLayout = Null
    Endif
  
    $sLastObject = sObject
    
    Try cvwObject.Remove("^")
    
    hBold = cvwObject.Font.Copy()
    hBold.Bold = True
    
    AddVariableHeader(cvwObject, "^", ("Current object"))
    
    sPrefix = " :"
    For I = 0 To aObject.Max
      sVar = aObject[I]
      If Right(sVar) = ":" Then
        sPrefix = sVar
      Else
        aObject[I] = sPrefix & aObject[I]
      Endif
    Next
    
    aObject.Sort
    
    sParent = "^"
    For I = 0 To aObject.Max
      sVar = aObject[I]
      If Right(sVar) = ":" Then
        sVar = Left(sVar)
        bBold = sVar = UCase(sVar)
        hPict = Picture["$symbol:" & If(sVar == "S", "s-", "") & "variable.png"]
      Else
        sVar = Mid$(sVar, 3)
        aObject[I] = sVar
        With cvwObject.Add("^" & sVar, sVar, hPict, sParent)
          If bBold Then .Font = hBold
        End With
      Endif
    Next
    
    If cvwObject["^"].Children = 0 Then cvwObject.Remove("^")
    
    If vLayout Then cvwObject.Layout = vLayout
    
  Endif
  
  If sLocal <> $sLastLocal Then
    
    If cvwVariable.Count Then 
      vLayout = cvwVariable.Layout
    Else
      vLayout = Null
    Endif
  
    $sLastLocal = sLocal
    
    Try cvwVariable.Remove("~")
    
    hBold = cvwVariable.Font.Copy()
    hBold.Bold = True
    
    AddVariableHeader(cvwVariable, "~", ("Local variables")) 
    
    For Each sVar In aLocal
      cvwVariable.Add("~" & sVar, sVar,, "~")
    Next
    
    If cvwVariable["~"].Children = 0 Then cvwVariable.Remove("~")

    If vLayout Then cvwVariable.Layout = vLayout
    Try cvwVariable["~"].Expanded = True
    
  Endif
  
  If wizDebug.Index <> TAB_DEBUG Then Return
  
  RefreshVariable
  
End

Public Sub AddVariable(sVar As String, sValue As String, Optional bAssign As Boolean)
  
  Dim hView As ColumnView
  
  If cvwVariable.Exist(sVar) Then
    hView = cvwVariable
  Else If cvwObject.Exist(sVar) Then
    hView = cvwObject
  Else
    Return
  Endif
  
  If bAssign Then
    If Left(sValue) = "!" Then
      With hView[sVar]
        Balloon.Error(Mid$(sValue, 2), hView, Design.BalloonX, Design.BalloonY)
      End With
    Endif
    Design.Command("&V" & sVar & "\t" & Mid$(sVar, 2))
  Else
    With hView[sVar]
      If .[1] <> sValue Then
        .Background = $iChangeColor
      Else
        .Background = Color.Default
      Endif
      .[1] = sValue
    End With
  Endif
  
End

Public Sub cvwVariable_Activate()
  
  Dim sExpr As String 
  Dim sVal As String 
  Dim hView As ColumnView
  
  hView = Last
  
  With hView.Current
    
    If .Children Then Return
    
    sExpr = .Text
    sVal = .[1]
    
    If Left(sVal) = "(" Then 
      Design.Command("#X" & sExpr & "\t" & sExpr)
    Else
      If .Key Begins "@" Then Return
      
      If sVal Begins Chr$(34) And If Len(sVal) > 128 Then
        If Not FText.Run(UnQuote(sVal), Subst(("Modify '&1' value"), sExpr)) Then
          Design.Command("=V" & .Key & "\t" & sExpr & " = " & Quote(FText.Value))
        Endif
      Else
        .Editable = True
        .Rename(1)
        .Editable = False
      Endif
    Endif
    
  End With
  
End

Public Sub OnProjectDebug()
  
  $sLastLocal = ""
  $sLastObject = ""
  If Settings["/ShowDebugPanelAutomatically", True] Then FDebugButton.SelectButton(TAB_CONSOLE)
  lblError.Text = ""
  lblError.Adjust
  panError.Hide
  sepError.Hide
  
  cmbTest.Enabled = Not Project.Running
  
  ' If Design.IsRemote() Then
  '   btnDebugProcess.Picture = Picture["icon:/small/connect"]
  ' Else
  '   btnDebugProcess.Picture = Picture["icon:/small/exec"]
  ' Endif
  ' 
  ' btnDebugProcess.Text = ""
  
End

Public Sub UpdateProcessInfo(iProcessId As Integer, iProcessFiles As Integer, iProcessMemory As Long)
  
  If iProcessId >= 0 Then
    
    If Design.IsExtern() Then
      picProcess.Picture = Picture["icon:/small/connect"]
    Else
      picProcess.Picture = Picture["icon:/small/exec"]
    Endif
    
    If iProcessId = 0 Then
      
      lblProcessId.Hide
      
    Else
      
      lblProcessId.Show
      lblProcessId.Text = Subst(("Process &1"), iProcessId)
      
    Endif
    
  Endif
  
  If iProcessId = 0 Then
    
    panProcessFiles.Hide
    panProcessMemoryRead.Hide
    
  Else
    
    If iProcessFiles < 0 Then
      panProcessFiles.Hide
    Else
      panProcessFiles.Show
      lblProcessFiles.Text = CStr(iProcessFiles)
    Endif
    
    If iProcessMemory < 0 Then
      panProcessMemory.Hide
    Else
      panProcessMemory.Show
      lblProcessMemory.Text = File.FormatSize(iProcessMemory, True) 
    Endif
    
  Endif
  
End

Public Sub OnProjectDebugState()
  
  panBreakpoint.Enabled = Not Design.IsRunning()
  lvwBreakpoint.Enabled = panBreakpoint.Enabled
  Action[".break"].Enabled = panBreakpoint.Enabled
  
End

Public Sub StartWaitForRemote()

  splDebug.Hide
  panRemoteDebug.Show
  spnRemoteDebug.Start
  
End

Public Sub StopWaitForRemote()
  
  spnRemoteDebug.Stop
  panRemoteDebug.Hide
  splDebug.Show
  
End

Public Sub ShowDebugging()
  
  If Settings["/ShowDebugPanelAutomatically", True] Then FDebugButton.SelectButton(TAB_DEBUG)
  
End

Public Sub ShowTest()
  
  FMain.ShowDebug(True)
  FDebugButton.SelectButton(TAB_TEST)
  
End

Public Sub cvwVariable_Rename()
  
  Dim sVar As String
  Dim hView As ColumnView
  
  hView = Last
  With hView.Current
    
    sVar = .Key
    
    Design.SetBalloon(hView, hView.Columns[1].X + Desktop.Scale, .Y + .H / 2)
    Design.Command("=V" & sVar & "\t" & .Text & " = " & .[1])
    'Design.Command("&V" & sVar & "\t" & .Text)
    
  End With
  
End

Public Sub btnVcCommit_Click()

  If Project.Compile() Then Return
  FVersionControl.Run

End

Public Sub InsertVersionControl(sText As String)
  
  If FMain.IsDebugVisible() Then FDebugButton.SelectButton(TAB_VERSION_CONTROL)
  trmVersionControl.Print(Replace(sText, "\n", "\r\n"))
  
End

Public Sub btnVcUpdate_Click()

  If Message.Question(("Do you really want to synchronize the repository?"), ("Synchronize"), ("Cancel")) = 2 Then Return
  VersionControl.Update

End

Public Sub btnVcRevert_Click()

  VersionControl.Revert

End

Public Sub btnVcAddAll_Click()

  FMain.mnuAddVersionAll_Click()

End

Public Sub OnVersionControlChange()

  UpdateView

  If VersionControl.Enabled Then
    lblVcName.Text = VersionControl.Name
    UpdateBranchMenu
  Endif
  
End

Private Sub UpdateBranchMenu()

  Dim sCurrent As String
  Dim aBranches As String[]
  Dim sBranch As String
  Dim hMenu As Menu
  
  aBranches = VersionControl.GetBranches(ByRef sCurrent)
  
  If Not sCurrent Then
    btnVcBranch.Hide
  Else
    btnVcBranch.Show
    btnVcBranch.Text = sCurrent
    mnuVcBranch.Children.Clear
    
    For Each sBranch In aBranches
      hMenu = New Menu(mnuVcBranch) As "mnuVcBranchSet"
      hMenu.Text = sBranch
      hMenu.Tag = sBranch
      hMenu.Radio = True
      hMenu.Value = sBranch = sCurrent
    Next
  Endif

End

Public Sub mnuVcBranchSet_Click()
  
  VersionControl.SetBranch(Last.Tag)
  UpdateBranchMenu
  
End


Public Sub btnVcClear_Click()

  trmVersionControl.Clear

End

Private Sub UpdateWatchButtons()

  btnAddWatch.Enabled = cmbWatch.Length > 0
  btnKillWatch.Enabled = cvwVariable.Key Like "@?*"
  btnAddTrack.Enabled = btnAddWatch.Enabled Or btnKillWatch.Enabled
  btnKillAllWatch.Enabled = cvwVariable.Exist("@")

End

Public Sub cvwVariable_Select()

  Balloon.Hide(Last)
  UpdateWatchButtons

End

Public Sub GetTestTerminal() As TerminalView

  Return trmTest

End

Public Sub btnTestClear_Click()

  trmTest.Clear
  panTestResult.Hide

End

Public Sub trmTest_Link()

  FOutput.CheckTerminalLink(trmTest)

End

Public Sub trmTest_Click()

  If trmTest.Link.Type = "goto" Then
    Project.Goto(trmTest.Link.Text)
  Endif

End

Public Sub StartTest()
  
  panTestResult.Hide
  spnTest.Show
  spnTest.Start
  
End

Public Sub StopTest(iResult As Integer)

  spnTest.Stop
  spnTest.Hide
  
  Select Case iResult
  
    Case MTest.TEST_FAIL
      lblTestResult.Text = ("Test has failed.")
      lblTestResult.Foreground = Color.DarkRed
      picTestResult.Picture = Picture["icon:/small/emote-sad"]
      $iTestBg = Color.Merge(Color.Red, Color.Background, 0.7)
      
    Case MTest.TEST_ABORT
      lblTestResult.Text = ("Test has been aborted.")
      lblTestResult.Foreground = Color.DarkYellow
      picTestResult.Picture = Picture["icon:/small/warning"]
      $iTestBg = Color.Merge(Color.Yellow, Color.Background, 0.7)
      
    Case Else
      lblTestResult.Text = ("Test has succeeded.")
      lblTestResult.Foreground = Color.DarkGreen
      picTestResult.Picture = Picture["icon:/small/love"]
      $iTestBg = Color.Merge(Color.Green, Color.Background, 0.7)
      
  End Select
  
  If Application.DarkTheme Then 
    lblTestResult.Foreground = Color.Invert(lblTestResult.Foreground, True)
    $iTestBg = Color.Invert($iTestBg, True)
  Endif
  
  picTestResult.W = Stock.GetSize("small")
  panTestResult.W = picTestResult.W + lblTestResult.W + Desktop.Scale * 4
  panTestResult.Show
  panTestResult.Refresh
  
  ShowTest

End

Public Sub panTestResult_Draw()

  Dim DS As Integer

  DS = Desktop.Scale \ 2
  Paint.Rectangle(0, DS, Paint.W, Paint.H - DS * 2, DS * 4)
  Paint.Background = $iTestBg
  Paint.Fill

End

Public Sub trmTest_GotFocus()

  Project.SetCurrentPopup(Null)

End

Private Sub AddTrack(sExpr As String)

  If $cTrack.Exist("@" & sExpr) Then Return
  
  Inc $iTrackId
  $cTrack[$iTrackId] = sExpr
  $cTrack["@" & sExpr] = $iTrackId
  
  Design.Command("w" & CStr($iTrackId) & "\t" & sExpr)

End

Private Sub RemoveTrack(sExpr As String)
  
  Dim iId As Integer
  
  sExpr = "@" & sExpr
  If Not $cTrack.Exist(sExpr) Then Return
  
  iId = $cTrack[sExpr]
  Design.Command("w" & CStr(iId))
  $cTrack.Remove(iId)
  $cTrack.Remove(sExpr)
  
End

Public Sub btnAddTrack_Click()

  Dim sExpr As String
  Dim sKey As String

  sExpr = GetWatchExpression()
  If sExpr Then Goto ADD_WATCH
  
  sKey = cvwVariable.Key
  If sKey Begins "@" Then 
    sExpr = Mid$(sKey, 2)
    If Not sExpr Then Return
    If $cTrack.Exist(sKey) Then
      Goto REMOVE_WATCH
    Else
      Goto ADD_WATCH
    Endif
  Endif
  Return
  
ADD_WATCH:
  
  btnAddWatch_Click
  AddTrack(sExpr)
  UpdateWatch(sExpr)
  Return
  
REMOVE_WATCH:

  RemoveTrack(sExpr)
  UpdateWatch(sExpr)
  Return
  
End

Public Sub btnKillAllWatch_Click()

  If Message.Question(("Do you want to clear the expression list ?"), ("Clear"), ("Cancel")) = 2 Then Return
  
  cvwVariable.Remove("@")
  For Each $cTrack
    If $cTrack.Key Begins "@" Then Continue
    Design.Command("w" & $cTrack.Key)
  Next
  UpdateWatchButtons

End

Public Sub IsWatch(sExpr As String) As Boolean
  
  Return $cTrack.Exist(sExpr)
  
End

Public Sub GetWatches() As String[]

  Dim aCmd As New String[]
  Dim sExpr As String
  
  If cvwVariable.MoveTo("@") Then Return aCmd
  If cvwVariable.MoveChild() Then Return aCmd
  
  Repeat
    sExpr = cvwVariable.Item.Text
    aCmd.Add("?W" & sExpr & "\t" & sExpr)
    If $cTrack.Exist("@" & sExpr) Then aCmd.Add("w" & $cTrack["@" & sExpr] & "\t" & sExpr)
  Until cvwVariable.MoveNext()
  
  Return aCmd
  
End

Public Sub cmbWatch_Change()

  If cmbWatch.Length = 0 Then
    cmbWatch.Font = lvwStack.Font
    'cmbWatch.Font.Italic = True
  Else
    Project.SetEditorFont(cmbWatch)
  Endif
  
  UpdateWatchButtons

End

Public Sub btnVcChanges_Click()

  FFileInfoVC.Run(Project.Dir)

End


Public Sub cvwVariable_Expand()

  RefreshVariable

End

Public Sub panDebug_Arrange()

  lblError.H = lblError.Font.H + Desktop.Scale
  lblError.Adjust
  panError.H = lblError.H

End

Public Sub lvwBreakpoint_Click()

  Project.Goto(lvwBreakpoint.Key)

End

Public Sub btnRemoveBreakpoint_Click()

  Dim hForm As FEditor
  
  If lvwBreakpoint.Key Then
    
    hForm = Project.Goto(lvwBreakpoint.Key)
    hForm.ToggleBreakpoint(hForm.GetEditor().Line)
    
  Endif

End

Public Sub RemoveAllBreakpoints()

  Dim hForm As FEditor
  Dim sBreakpoint As String
  Dim aBreakpoint As String[]
  
  If Message.Delete(("Do you really want to remove all breakpoints?"), ("Remove"), ("Cancel")) <> 1 Then Return

  For Each sBreakpoint In Breakpoints.GetAll()
    aBreakpoint = Split(sBreakpoint, ".")
    hForm = Project.LoadFile(Project.FindPath(aBreakpoint[0]))
    hForm.ToggleBreakpoint(CInt(aBreakpoint[1]) - 1)
  Next

End

Public Sub btnRemoveAllBreakpoints_Click()
  
  RemoveAllBreakpoints
  
End

Public Sub UpdateTestSuites()

  Dim iTestWith As Integer
  MTest.LoadSuites(ByRef iTestWith, cmbTest)

End

Public Sub cmbTest_Click()

  MTest.SaveTestWith(cmbTest.Index)

End

Public Sub spnIgnoreExtern_Change()

  Design.SetExternIgnore(spnIgnoreExtern.Value)

End

Public Sub SetExternIgnore(iNum As Integer)
  
  Object.Lock(spnIgnoreExtern)
  spnIgnoreExtern.Value = iNum
  Object.Unlock(spnIgnoreExtern)
  
End

